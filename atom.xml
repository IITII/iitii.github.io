<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Memo</title>
  
  
  <link href="https://iitii.github.io/atom.xml" rel="self"/>
  
  <link href="https://iitii.github.io/"/>
  <updated>2024-01-24T04:28:06.000Z</updated>
  <id>https://iitii.github.io/</id>
  
  <author>
    <name>IITII</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES 6/7 数据备份恢复</title>
    <link href="https://iitii.github.io/2024/11/01/1/"/>
    <id>https://iitii.github.io/2024/11/01/1/</id>
    <published>2024-11-01T04:28:06.000Z</published>
    <updated>2024-01-24T04:28:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWNzZWFyY2gtZHVtcA==">https://github.com/elasticsearch-dump<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2VsYXN0aWNkdW1wL2VsYXN0aWNzZWFyY2gtZHVtcA==">https://hub.docker.com/r/elasticdump/elasticsearch-dump<i class="fa fa-external-link-alt"></i></span></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><blockquote><p>更多请参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWNzZWFyY2gtZHVtcC9lbGFzdGljc2VhcmNoLWR1bXA/dGFiPXJlYWRtZS1vdi1maWxlI29wdGlvbnM=">https://github.com/elasticsearch-dump/elasticsearch-dump?tab=readme-ov-file#options<i class="fa fa-external-link-alt"></i></span></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--parallel 并发度</span><br><span class="line">--direction load: 恢复, dump: 导出(默认)</span><br><span class="line">--input 数据来源</span><br><span class="line">--match 正则匹配需要导出的索引</span><br><span class="line">--includeType= 导出类型, 支持六种: data,mapping,analyzer,alias,settings,template</span><br><span class="line">--output 数据输出</span><br></pre></td></tr></table></figure><h2 id="环境假设"><a href="#环境假设" class="headerlink" title="环境假设"></a>环境假设</h2><blockquote><p>如果因为分词插件等造成同步失败, 请自行解决  </p></blockquote><ul><li>es6: <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo5MjAwLw==">http://127.0.0.1:9200<i class="fa fa-external-link-alt"></i></span></li><li>es7 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMToxOTIwMC8=">http://127.0.0.1:19200<i class="fa fa-external-link-alt"></i></span></li><li>esdump6 存储 es6 导出的数据</li><li>esdump7 存储 es7 导出的数据</li><li>需要备份的索引为 <code>test_backup.*</code></li></ul><h2 id="es6-数据导出恢复"><a href="#es6-数据导出恢复" class="headerlink" title="es6 数据导出恢复"></a>es6 数据导出恢复</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v `pwd`/esdump6:/esdump --rm -ti --entrypoint multielasticdump elasticdump/elasticsearch-dump \</span><br><span class="line">  --direction=dump \</span><br><span class="line">  --match=&#x27;^test_backup.*$&#x27;\</span><br><span class="line">  --input=http://127.0.0.1:9200 \</span><br><span class="line">  --includeType=&#x27;settings,mapping,analyzer,alias,data&#x27; \</span><br><span class="line">  --output=/esdump &gt;es_dump.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v `pwd`/esdump6:/esdump --rm -ti --entrypoint multielasticdump elasticdump/elasticsearch-dump \</span><br><span class="line">  --parallel=4 \</span><br><span class="line">  --direction=load \</span><br><span class="line">  --input=/esdump \</span><br><span class="line">  --includeType=&#x27;settings,mapping,analyzer,alias,data&#x27; \</span><br><span class="line">  --output=http://127.0.0.1:9200 &gt;es_load.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="es7-数据导出恢复"><a href="#es7-数据导出恢复" class="headerlink" title="es7 数据导出恢复"></a>es7 数据导出恢复</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v `pwd`/esdump6:/esdump --rm -ti --entrypoint multielasticdump elasticdump/elasticsearch-dump \</span><br><span class="line">  --direction=dump \</span><br><span class="line">  --match=&#x27;^test_backup.*$&#x27;\</span><br><span class="line">  --input=http://127.0.0.1:19200 \</span><br><span class="line">  --includeType=&#x27;settings,mapping,analyzer,alias,data&#x27; \</span><br><span class="line">  --output=/esdump &gt;es_dump.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="恢复-1"><a href="#恢复-1" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v `pwd`/esdump7:/esdump --rm -ti --entrypoint multielasticdump elasticdump/elasticsearch-dump \</span><br><span class="line">  --parallel=4 \</span><br><span class="line">  --direction=load \</span><br><span class="line">  --input=/esdump \</span><br><span class="line">  --includeType=&#x27;settings,mapping,analyzer,alias,data&#x27; \</span><br><span class="line">  --output=http://127.0.0.1:19200 &gt;es_load.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="es-跨版本导出恢复"><a href="#es-跨版本导出恢复" class="headerlink" title="es 跨版本导出恢复"></a>es 跨版本导出恢复</h2><blockquote><p>没有 es7 向下恢复到 es6 的需求, 请自行尝试  </p></blockquote><ul><li><p>因为 es6 和 es7 数据结构上不太一致, 所以需要先预处理数据</p><h3 id="es6-数据导出后恢复到-es7"><a href="#es6-数据导出后恢复到-es7" class="headerlink" title="es6 数据导出后恢复到 es7"></a>es6 数据导出后恢复到 es7</h3><h4 id="预处理数据"><a href="#预处理数据" class="headerlink" title="预处理数据"></a>预处理数据</h4></li><li><p>这里主要是这三个文件有问题: ‘analyzer.json’, ‘settings.json’, ‘mapping.json’</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es6 -&gt; es7 数据处理脚本</span></span><br><span class="line"><span class="comment"> * nodejs v12.22.12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>),</span><br><span class="line">  path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>),</span><br><span class="line">  dir = <span class="string">&#x27;./esdump7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// analyzer, settings</span></span><br><span class="line">fs.<span class="title function_">readdirSync</span>(dir, &#123;<span class="attr">withFileTypes</span>: <span class="literal">true</span>&#125;).<span class="title function_">filter</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="title function_">isFile</span>())</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">name</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">_</span> =&gt;</span> [<span class="string">&#x27;analyzer.json&#x27;</span>, <span class="string">&#x27;settings.json&#x27;</span>].<span class="title function_">some</span>(<span class="function"><span class="params">__</span> =&gt;</span> _.<span class="title function_">includes</span>(__)))</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> path.<span class="title function_">resolve</span>(__dirname, dir, _))</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fs.writeFileSync(&#x27;/tmp/1.json&#x27;, JSON.stringify(JSON.stringify(JSON.parse(JSON.parse(b)))))</span></span><br><span class="line">    <span class="keyword">let</span> raw = fs.<span class="title function_">readFileSync</span>(f, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(raw))</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> json) &#123;</span><br><span class="line">      json[k].<span class="property">settings</span>.<span class="property">index</span>.<span class="property">max_ngram_diff</span> = <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(f, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json)))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapping</span></span><br><span class="line">fs.<span class="title function_">readdirSync</span>(dir, &#123;<span class="attr">withFileTypes</span>: <span class="literal">true</span>&#125;).<span class="title function_">filter</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="title function_">isFile</span>())</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">name</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">_</span> =&gt;</span> [<span class="string">&#x27;mapping.json&#x27;</span>].<span class="title function_">some</span>(<span class="function"><span class="params">__</span> =&gt;</span> _.<span class="title function_">includes</span>(__)))</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> path.<span class="title function_">resolve</span>(__dirname, dir, _))</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fs.writeFileSync(&#x27;/tmp/1.json&#x27;, JSON.stringify(JSON.stringify(JSON.parse(JSON.parse(b)))))</span></span><br><span class="line">    <span class="keyword">let</span> raw = fs.<span class="title function_">readFileSync</span>(f, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(raw)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> json) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> j <span class="keyword">in</span> json[k].<span class="property">mappings</span>) &#123;</span><br><span class="line">        json[k].<span class="property">mappings</span> = json[k].<span class="property">mappings</span>[j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(f, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="恢复-2"><a href="#恢复-2" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -v `pwd`/esdump7:/esdump --rm -ti --entrypoint multielasticdump elasticdump/elasticsearch-dump \</span><br><span class="line">  --parallel=4 \</span><br><span class="line">  --direction=load \</span><br><span class="line">  --input=/esdump \</span><br><span class="line">  --includeType=&#x27;settings,mapping,analyzer,alias,data&#x27; \</span><br><span class="line">  --output=http://127.0.0.1:19200 &gt;es_load.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">es 跨版本数据备份恢复记录</summary>
    
    
    
    <category term="es" scheme="https://iitii.github.io/categories/es/"/>
    
    <category term="backup" scheme="https://iitii.github.io/categories/es/backup/"/>
    
    
    <category term="es" scheme="https://iitii.github.io/tags/es/"/>
    
    <category term="data" scheme="https://iitii.github.io/tags/data/"/>
    
    <category term="backup" scheme="https://iitii.github.io/tags/backup/"/>
    
  </entry>
  
  <entry>
    <title>Spark create function 逻辑</title>
    <link href="https://iitii.github.io/2023/10/24/1/"/>
    <id>https://iitii.github.io/2023/10/24/1/</id>
    <published>2023-10-24T03:36:57.000Z</published>
    <updated>2024-01-24T03:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>函数注册成功, 但是在调用的时候提示无法加载对应的类.</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>spark 创建函数的时候并不会直接去加载对应的资源/类, 只有在使用时才会加载对应的资源和类, 因此创建成功并不能代表能正常使用</li><li>hive 创建函数的时候会去加载对应的类, 所以创建成功即代表可用</li></ul><h2 id="spark-sql-测试"><a href="#spark-sql-测试" class="headerlink" title="spark-sql 测试"></a>spark-sql 测试</h2><p><img src="/images/spark/function/1.png" alt="Untitled"></p><h2 id="create-temp-func-和-create-func-的区别"><a href="#create-temp-func-和-create-func-的区别" class="headerlink" title="create temp func 和 create func 的区别"></a>create temp func 和 create func 的区别</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] [ TEMPORARY ] <span class="keyword">FUNCTION</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ]</span><br><span class="line">    function_name <span class="keyword">AS</span> class_name [ resource_locations ]</span><br></pre></td></tr></table></figure><ul><li>从语法上都是, 创建一个自定义函数, 只是前者注册的是临时函数, 只在当前 Session 有效. 后者注册的函数是永久函数, 一直生效.</li></ul><p>查看对应的代码: org.apache.spark.sql.execution.command.CreateFunctionCommand#run</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9ibG9iLzgwN2UwYTQ4NGQxZGU3NjdkMWYwMmJkOGE2MjJkYTY0NTBiZGY5NDAvc3FsL2NvcmUvc3JjL21haW4vc2NhbGEvb3JnL2FwYWNoZS9zcGFyay9zcWwvZXhlY3V0aW9uL2NvbW1hbmQvZnVuY3Rpb25zLnNjYWxhI0w3NS1MOTU=">https://github.com/apache/spark/blob/807e0a484d1de767d1f02bd8a622da6450bdf940/sql/core/src/main/scala/org/apache/spark/sql/execution/command/functions.scala#L75-L95<i class="fa fa-external-link-alt"></i></span></p><ul><li>从代码里面可以看到 create tmp func 是通过 loadResource 加载对应 class 后, 直接注册到当前 Session 的 functionRegistry 里面. 而 create func 是直接在 catelog 里面创建对应的函数, 并不加载资源.</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sparkSession: <span class="type">SparkSession</span>): <span class="type">Seq</span>[<span class="type">Row</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> catalog = sparkSession.sessionState.catalog</span><br><span class="line">    <span class="keyword">val</span> func = <span class="type">CatalogFunction</span>(<span class="type">FunctionIdentifier</span>(functionName, databaseName), className, resources)</span><br><span class="line">    <span class="keyword">if</span> (isTemp) &#123;</span><br><span class="line">      <span class="comment">// We first load resources and then put the builder in the function registry.</span></span><br><span class="line">      catalog.loadFunctionResources(resources)</span><br><span class="line">      catalog.registerFunction(func, overrideIfExists = replace)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Handles `CREATE OR REPLACE FUNCTION AS ... USING ...`</span></span><br><span class="line">      <span class="keyword">if</span> (replace &amp;&amp; catalog.functionExists(func.identifier)) &#123;</span><br><span class="line">        <span class="comment">// alter the function in the metastore</span></span><br><span class="line">        catalog.alterFunction(func)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// For a permanent, we will store the metadata into underlying external catalog.</span></span><br><span class="line">        <span class="comment">// This function will be loaded into the FunctionRegistry when a query uses it.</span></span><br><span class="line">        <span class="comment">// We do not load it into FunctionRegistry right now.</span></span><br><span class="line">        catalog.createFunction(func, ignoreIfExists)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Seq</span>.empty[<span class="type">Row</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再结合这几个 issues 的 Conversation 和最新的 spark 代码, 我们可以知道 “创建自定义函数时加载对应类” 这个概念是没有问题的. 当类不存在的时候, 在 Hive 通过这两种方式创建函数, 都是会失败的. 之所以 Spark 兼容 create func, 是因为考虑到 多 Spark 集群/多租户 共用 Catalog, 其他的 SparkSession 可能没有权限访问所有的资源或 UDF class.</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9wdWxsLzI5NTAyI2lzc3VlY29tbWVudC02ODk2MTU4MDY=">https://github.com/apache/spark/pull/29502#issuecomment-689615806<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/spark/function/2.png" alt="Untitled"></p><blockquote><p>那么这两种方式创建的自定义函数在加载资源方面有什么不用呢?</p></blockquote><blockquote><p>为什么 Hive 测试都会失败呢?</p></blockquote><h2 id="loadResource-时间点"><a href="#loadResource-时间点" class="headerlink" title="loadResource 时间点"></a>loadResource 时间点</h2><ul><li>从上面已经知道, create tmp func 在创建的时候资源加载已经完成了. create func 的资源加载发生在执行的时候.</li><li>这里加载注册, 走的是统一的外部 Catalog 自定义函数加载逻辑</li><li>SQL Text → QueryPlan → ResolveFunction → HiveCatalog  → SessionCatalog → functionRegistry.lookupFunction → ExternalCataLog → LoadResource → functionRegistry.registerFunction</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9ibG9iLzgwN2UwYTQ4NGQxZGU3NjdkMWYwMmJkOGE2MjJkYTY0NTBiZGY5NDAvc3FsL2NhdGFseXN0L3NyYy9tYWluL3NjYWxhL29yZy9hcGFjaGUvc3Bhcmsvc3FsL2NhdGFseXN0L2NhdGFsb2cvU2Vzc2lvbkNhdGFsb2cuc2NhbGEjTDEyNzA=">https://github.com/apache/spark/blob/807e0a484d1de767d1f02bd8a622da6450bdf940/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/catalog/SessionCatalog.scala#L1270-L1310<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookupFunction</span></span>(</span><br><span class="line">      name: <span class="type">FunctionIdentifier</span>,</span><br><span class="line">      children: <span class="type">Seq</span>[<span class="type">Expression</span>]): <span class="type">Expression</span> = synchronized &#123;</span><br><span class="line">    <span class="comment">// Note: the implementation of this function is a little bit convoluted.</span></span><br><span class="line">    <span class="comment">// We probably shouldn&#x27;t use a single FunctionRegistry to register all three kinds of functions</span></span><br><span class="line">    <span class="comment">// (built-in, temp, and external).</span></span><br><span class="line">    <span class="keyword">if</span> (name.database.isEmpty &amp;&amp; functionRegistry.functionExists(name)) &#123;</span><br><span class="line">      <span class="comment">// This function has been already loaded into the function registry.</span></span><br><span class="line">      <span class="keyword">return</span> functionRegistry.lookupFunction(name, children)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the name itself is not qualified, add the current database to it.</span></span><br><span class="line">    <span class="keyword">val</span> database = formatDatabaseName(name.database.getOrElse(getCurrentDatabase))</span><br><span class="line">    <span class="keyword">val</span> qualifiedName = name.copy(database = <span class="type">Some</span>(database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (functionRegistry.functionExists(qualifiedName)) &#123;</span><br><span class="line">      <span class="comment">// This function has been already loaded into the function registry.</span></span><br><span class="line">      <span class="comment">// Unlike the above block, we find this function by using the qualified name.</span></span><br><span class="line">      <span class="keyword">return</span> functionRegistry.lookupFunction(qualifiedName, children)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The function has not been loaded to the function registry, which means</span></span><br><span class="line">    <span class="comment">// that the function is a permanent function (if it actually has been registered</span></span><br><span class="line">    <span class="comment">// in the metastore). We need to first put the function in the FunctionRegistry.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> why not just check whether the function exists first?</span></span><br><span class="line">    <span class="keyword">val</span> catalogFunction = <span class="keyword">try</span> &#123;</span><br><span class="line">      externalCatalog.getFunction(database, name.funcName)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">AnalysisException</span> =&gt; failFunctionLookup(name)</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">NoSuchPermanentFunctionException</span> =&gt; failFunctionLookup(name)</span><br><span class="line">    &#125;</span><br><span class="line">    loadFunctionResources(catalogFunction.resources)</span><br><span class="line">    <span class="comment">// Please note that qualifiedName is provided by the user. However,</span></span><br><span class="line">    <span class="comment">// catalogFunction.identifier.unquotedString is returned by the underlying</span></span><br><span class="line">    <span class="comment">// catalog. So, it is possible that qualifiedName is not exactly the same as</span></span><br><span class="line">    <span class="comment">// catalogFunction.identifier.unquotedString (difference is on case-sensitivity).</span></span><br><span class="line">    <span class="comment">// At here, we preserve the input from the user.</span></span><br><span class="line">    registerFunction(catalogFunction.copy(identifier = qualifiedName), overrideIfExists = <span class="literal">false</span>)</span><br><span class="line">    <span class="comment">// Now, we need to create the Expression.</span></span><br><span class="line">    functionRegistry.lookupFunction(qualifiedName, children)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="hive-create-func-逻辑"><a href="#hive-create-func-逻辑" class="headerlink" title="hive create func 逻辑"></a>hive create func 逻辑</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [db_name.]function_name <span class="keyword">AS</span> class_name</span><br><span class="line">  [<span class="keyword">USING</span> JAR<span class="operator">|</span>FILE<span class="operator">|</span>ARCHIVE <span class="string">&#x27;file_uri&#x27;</span> [, JAR<span class="operator">|</span>FILE<span class="operator">|</span>ARCHIVE <span class="string">&#x27;file_uri&#x27;</span>] ];</span><br></pre></td></tr></table></figure><ul><li>流程: SQL 解析(AST) → FunctionTask → FunctionRegistry → Registry.createPermanentFunction → Registry.registerToSessionRegistry → FunctionTask.addFunctionResources → SessionState.getRegistryForWrite().registerFunction</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyAddUDF实现了简单的加法</span></span><br><span class="line">create function testadd as <span class="string">&#x27;com.test.udf.MyAddUDF&#x27;</span></span><br><span class="line">using</span><br><span class="line">jar <span class="string">&#x27;hdfs://localhost:9000/udf/MyTestUDF-1.0.jar&#x27;</span>, </span><br><span class="line">jar <span class="string">&#x27;hdfs://localhost:9000/udf/UDFDep-1.0.jar&#x27;</span>;           <span class="comment">// MyTestUDF的依赖</span></span><br></pre></td></tr></table></figure><h3 id="SQL-解析-AST"><a href="#SQL-解析-AST" class="headerlink" title="SQL 解析(AST)"></a>SQL 解析(AST)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TOK_CREATEFUNCTION</span><br><span class="line">   testadd</span><br><span class="line">   <span class="string">&#x27;com.test.udf.MyAddUDF&#x27;</span></span><br><span class="line">   TOK_RESOURCE_LIST</span><br><span class="line">      TOK_RESOURCE_URI</span><br><span class="line">         TOK_JAR</span><br><span class="line">         <span class="string">&#x27;hdfs://localhost:9000/udf/MyTestUDF-1.0.jar&#x27;</span></span><br><span class="line">      TOK_RESOURCE_URI</span><br><span class="line">         TOK_JAR</span><br><span class="line">         <span class="string">&#x27;hdfs://localhost:9000/udf/UDFDep-1.0.jar&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="FunctionRegistry"><a href="#FunctionRegistry" class="headerlink" title="FunctionRegistry"></a>FunctionRegistry</h3><p>这里注意checkLocalFunctionResources：当metastore是local模式时，resource uri才可以使用本地文件系统，否则只能使用如hdfs等文件系统。接下来是两个重要的步骤：</p><ol><li>注册UDF：FunctionRegistry.registerPermanentFunction。这里有两个关键点：</li><li>将根据resource URL将jar包UDF下载到本地，并将本地jar包URL加入当前Session的UDFClassLoader的classpath；</li><li>FunctionRegistry的静态常量Registry system里注册UDF信息。</li><li>UDF信息写入metastore</li></ol><p>FunctionRegistry调用Registry system的registerPermanentFunction函数，Registry system是静态常量，里面保存了所有UDF的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from FunctionRegistry</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> FunctionInfo <span class="title function_">registerPermanentFunction</span><span class="params">(String functionName,</span></span><br><span class="line"><span class="params">      String className, <span class="type">boolean</span> registerToSession, FunctionResource[] resources)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> system.registerPermanentFunction(functionName, className, registerToSession, resources);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Registry的registerPermanentFunction函数首先执行会registerToSessionRegistry。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from Registry  </span></span><br><span class="line">  <span class="keyword">public</span> FunctionInfo <span class="title function_">registerPermanentFunction</span><span class="params">(String functionName,</span></span><br><span class="line"><span class="params">      String className, <span class="type">boolean</span> registerToSession, FunctionResource... resources)</span> &#123;</span><br><span class="line">    <span class="type">FunctionInfo</span> <span class="variable">function</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FunctionInfo</span>(functionName, className, resources);</span><br><span class="line">    <span class="comment">// register to session first for backward compatibility</span></span><br><span class="line">    <span class="keyword">if</span> (registerToSession) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">qualifiedName</span> <span class="operator">=</span> FunctionUtils.qualifyFunctionName(</span><br><span class="line">          functionName, SessionState.get().getCurrentDatabase().toLowerCase());</span><br><span class="line">      <span class="keyword">if</span> (registerToSessionRegistry(qualifiedName, function) != <span class="literal">null</span>) &#123;</span><br><span class="line">        addFunction(functionName, function);</span><br><span class="line">        <span class="keyword">return</span> function;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addFunction(functionName, function);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>registerToSessionRegistry有两个主要功能：</p><ol><li>执行FunctionTask.addFunctionResources(resources)，作用是下载resources所指的jar包到本地目录，同时将本地的jar包路径的classpath加入ClassLoader中。</li><li>addFunctionResources主要调用SessionState的add_resources</li><li>执行SessionState.getRegistryForWrite().registerFunction，作用是将UDF信息加入当前Session的Registry system（注意区别FunctionRegistry的Registry system）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from Registry  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// should be called after session registry is checked</span></span><br><span class="line"><span class="keyword">private</span> FunctionInfo <span class="title function_">registerToSessionRegistry</span><span class="params">(String qualifiedName, FunctionInfo function)</span> &#123;</span><br><span class="line">  <span class="type">FunctionInfo</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 或许当前Session的ClassLoader</span></span><br><span class="line">  <span class="type">ClassLoader</span> <span class="variable">prev</span> <span class="operator">=</span> Utilities.getSessionSpecifiedClassLoader();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Found UDF in metastore - now add it to the function registry</span></span><br><span class="line">    <span class="comment">// At this point we should add any relevant jars that would be needed for the UDf.</span></span><br><span class="line">    FunctionResource[] resources = function.getResources();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      FunctionTask.addFunctionResources(resources);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      LOG.error(<span class="string">&quot;Unable to load resources for &quot;</span> + qualifiedName + <span class="string">&quot;:&quot;</span> + e, e);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> Utilities.getSessionSpecifiedClassLoader();</span><br><span class="line">    Class&lt;?&gt; udfClass = Class.forName(function.getClassName(), <span class="literal">true</span>, loader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the FunctionInfo is listed as PERSISTENT (rather than TEMPORARY)</span></span><br><span class="line">    <span class="comment">// when it is registered to the system registry.</span></span><br><span class="line">    ret = SessionState.getRegistryForWrite().registerFunction(</span><br><span class="line">        qualifiedName, FunctionType.PERSISTENT, udfClass, resources);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">      LOG.error(function.getClassName() + <span class="string">&quot; is not a valid UDF class and was not registered.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (SessionState.get().isHiveServerQuery()) &#123;</span><br><span class="line">      SessionState.getRegistryForWrite().addToUDFLoaders(loader);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    <span class="comment">// Lookup of UDf class failed</span></span><br><span class="line">    LOG.error(<span class="string">&quot;Unable to load UDF class: &quot;</span> + e);</span><br><span class="line">    Utilities.restoreSessionSpecifiedClassLoader(prev);</span><br><span class="line">  &#125;</span><br><span class="line">  function.shareStateWith(ret);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SessionState"><a href="#SessionState" class="headerlink" title="SessionState"></a>SessionState</h3><p>SessionState的add_resources两个要点：</p><ol><li>resolveAndDownload下载UDF jar包到本地，目录由hive.downloaded.resources.dir指定，默认是/tmp/${session_id}_resources。</li><li>将本地UDFjar包路径加入ClassLoader的classpath，这一点比较隐蔽，是调用t.preHook函数实现。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From SessionState</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">add_resources</span><span class="params">(ResourceType t, Collection&lt;String&gt; values)</span></span><br><span class="line">    <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">  <span class="comment">// By default don&#x27;t convert to unix</span></span><br><span class="line">  <span class="keyword">return</span> add_resources(t, values, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">add_resources</span><span class="params">(ResourceType t, Collection&lt;String&gt; values, <span class="type">boolean</span> convertToUnix)</span></span><br><span class="line">    <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">  Set&lt;String&gt; resourceSet = resourceMaps.getResourceSet(t);</span><br><span class="line">  Map&lt;String, Set&lt;String&gt;&gt; resourcePathMap = resourceMaps.getResourcePathMap(t);</span><br><span class="line">  Map&lt;String, Set&lt;String&gt;&gt; reverseResourcePathMap = resourceMaps.getReverseResourcePathMap(t);</span><br><span class="line">  List&lt;String&gt; localized = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">      String key;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//get the local path of downloaded jars. 下载jar包</span></span><br><span class="line">      List&lt;URI&gt; downloadedURLs = resolveAndDownload(value, convertToUnix);</span><br><span class="line">....</span><br><span class="line">      Set&lt;String&gt; downloadedValues = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (URI uri : downloadedURLs) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceValue</span> <span class="operator">=</span> uri.toString();</span><br><span class="line">...</span><br><span class="line">      &#125;</span><br><span class="line">      resourcePathMap.put(key, downloadedValues);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// !!!这里很重要，通过调用这个preHook将UDF jar包本地路径加入ClassLoader。</span></span><br><span class="line">    t.preHook(resourceSet, localized);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9wdWxsLzI5NTAy">https://github.com/apache/spark/pull/29502<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9wdWxsLzI5NzEz">https://github.com/apache/spark/pull/29713<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyaw==">https://github.com/apache/spark<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MDUxODkxNTQ=">https://zhuanlan.zhihu.com/p/405189154<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jd2lraS5hcGFjaGUub3JnL2NvbmZsdWVuY2UvZGlzcGxheS9IaXZlL0xhbmd1YWdlTWFudWFsK0RETCNMYW5ndWFnZU1hbnVhbERETC1DcmVhdGUvRHJvcC9SZWxvYWRGdW5jdGlvbg==">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-Create/Drop/ReloadFunction<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">处理问题时偶然发现 spark 函数不是注册成功就代表能用的, 遂记录一下</summary>
    
    
    
    <category term="spark" scheme="https://iitii.github.io/categories/spark/"/>
    
    
    <category term="spark" scheme="https://iitii.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>hdfs 实时 Decommissioned 节点</title>
    <link href="https://iitii.github.io/2023/09/09/1/"/>
    <id>https://iitii.github.io/2023/09/09/1/</id>
    <published>2023-09-09T17:21:34.000Z</published>
    <updated>2023-09-09T17:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><ul><li>在<code>hfds-site.xml</code> 中确保 <code>dfs.hosts</code>, <code>dfs.hosts.exclude</code> 都存在.<ul><li>假设为 <code>/tmp/includes</code> ,<code>/tmp/excludes</code></li></ul></li></ul><blockquote><p>上下线节点只需要修改 Namenode 的 <code>/tmp/includes</code> ,<code>/tmp/excludes</code> 文件, 也可以同步修改所有NN, DN节点</p></blockquote><h2 id="下线节点"><a href="#下线节点" class="headerlink" title="下线节点"></a>下线节点</h2><ul><li>假设要移除的节点为 dn1, dn1 需要同时存在于 <code>/tmp/includes</code> ,<code>/tmp/excludes</code></li><li>执行 <code>hdfs dfsadmin -refreshNodes</code> 即可不重启 hdfs, 将 DN节点下线</li><li>检查 hdfs web ui, 即可看到节点变为 <code>Decomission</code> 或者 <code>Decomissioning</code> 状态</li></ul><h2 id="重新上线节点"><a href="#重新上线节点" class="headerlink" title="重新上线节点"></a>重新上线节点</h2><ul><li>将 dn1 从 <code>/tmp/excludes</code> 中移除</li><li>执行 <code>hdfs dfsadmin -refreshNodes</code> 即可不重启 hdfs, 将 DN节点上线</li><li>检查 hdfs web ui, 即可看到节点变为 <code>In Service</code> 状态</li></ul>]]></content>
    
    
    <summary type="html">有点时候需要 Decommissioned 节点, 但是不能重启集群, 能做到吗?..</summary>
    
    
    
    <category term="hdfs" scheme="https://iitii.github.io/categories/hdfs/"/>
    
    
    <category term="hadoop" scheme="https://iitii.github.io/tags/hadoop/"/>
    
    <category term="hdfs" scheme="https://iitii.github.io/tags/hdfs/"/>
    
    <category term="Decommissioned" scheme="https://iitii.github.io/tags/Decommissioned/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果 AMD GPU 功耗一直很高</title>
    <link href="https://iitii.github.io/2023/08/31/1/"/>
    <id>https://iitii.github.io/2023/08/31/1/</id>
    <published>2023-08-31T16:20:07.000Z</published>
    <updated>2023-09-09T16:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>通过注入 DeviceProperties 实现</li></ul><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><ul><li>不需要 Whatevergreen</li><li>而且当机型为 <code>iMacPro1,1</code> 或 <code>MacPro7,1</code> 时, <code>DRM</code> 也可以正常工作</li><li>备份现有 OC 配置文件</li></ul><h2 id="查找-PCIe-路径"><a href="#查找-PCIe-路径" class="headerlink" title="查找 PCIe 路径"></a>查找 PCIe 路径</h2><ol><li>打开 Hackintool</li><li>点击 PCIe 页</li><li>找到显卡对应的 PCIe 路径, 复制(也可以直接在 OCC 里面手动选择对应的路径)</li></ol><h2 id="编辑-plist"><a href="#编辑-plist" class="headerlink" title="编辑 plist"></a>编辑 plist</h2><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9kb3J0YW5pYS5naXRodWIuaW8vR1BVLUJ1eWVycy1HdWlkZS9tb2Rlcm4tZ3B1cy9hbWQtZ3B1Lmh0bWwjbmF0aXZlLWFtZC1ncHVz">Navi 架构的卡<i class="fa fa-external-link-alt"></i></span>还需要添加 <code>SSDT-NAVI.aml</code> 到 <code>EFI/OC/ACPI</code> 和 plist 中  </p></blockquote><blockquote><p>修改 model 的值, 可以给显卡改名称  </p></blockquote><ul><li>禁用 <code>Whatevergreen.kext</code></li><li>删除 boot-arg <code>agdpmod=pikera</code></li><li>DeviceProperties -&gt; 显卡 PCIe 路径 -&gt; 添加 -&gt; <code>@0,name</code> 字符类型</li><li>因为我这个是 RX580 2048sp 刷的 RX570, 所以直接填 <code>ATY,Orinoco</code> 即可</li></ul><table><thead><tr><th align="center">显卡型号</th><th align="center">@0,name</th></tr></thead><tbody><tr><td align="center">RX6900</td><td align="center"><code>ATY,Carswell</code></td></tr><tr><td align="center">RX6800</td><td align="center"><code>ATY,Belknap</code></td></tr><tr><td align="center">RX6600/XT</td><td align="center"><code>ATY,Henbury</code></td></tr><tr><td align="center">Radeon 7</td><td align="center"><code>ATY,Donguil</code></td></tr><tr><td align="center">RX5700</td><td align="center"><code>ATY,Adder</code></td></tr><tr><td align="center">RX5500</td><td align="center"><code>ATY,Python</code></td></tr><tr><td align="center">RX570/580</td><td align="center"><code>ATY,Orinoco</code></td></tr></tbody></table><p><img src="/images/macos/bmac/watt/name.png" alt="IMG"></p><p><img src="/images/macos/bmac/watt/watt.png" alt="IMG"></p><ul><li>可以看到效果还是很明显的, 前面待机在 20~40w 跳动, 使用的时候才会上到 80w 左右</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5zYW5lbHltYWMuY29tL2ZvcnVtL3RvcGljLzM1MTk2OS1wcmUtcmVsZWFzZS1tYWNvcy12ZW50dXJhL3BhZ2UvMzcvI2NvbW1lbnQtMjc4NjEyMg==">https://www.insanelymac.com/forum/topic/351969-pre-release-macos-ventura/page/37/#comment-2786122<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzVUMzNaMC9PQy1MaXR0bGUtVHJhbnNsYXRlZC90cmVlL21haW4vMTFfR3JhcGhpY3MvR1BVL0FNRF9SYWRlb25fVHdlYWtzI21ldGhvZC0yYS1zZWxlY3Rpbmctc3BlY2lmaWMtYW1kLWZyYW1lYnVmZmVycy12aWEtZGV2aWNlcHJvcGVydGllcw==">https://github.com/5T33Z0/OC-Little-Translated/tree/main/11_Graphics/GPU/AMD_Radeon_Tweaks#method-2a-selecting-specific-amd-framebuffers-via-deviceproperties<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">之前 bios 刷完之后, iStat 看功耗一直都是 120W 上下, 电源也跟着热起来了...</summary>
    
    
    
    <category term="amd" scheme="https://iitii.github.io/categories/amd/"/>
    
    <category term="bmac" scheme="https://iitii.github.io/categories/amd/bmac/"/>
    
    
    <category term="amd" scheme="https://iitii.github.io/tags/amd/"/>
    
    <category term="bmac" scheme="https://iitii.github.io/tags/bmac/"/>
    
    <category term="hackintosh" scheme="https://iitii.github.io/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>蓝宝石 RX580 2048sp 刷 vbios 降级 RX570 记录</title>
    <link href="https://iitii.github.io/2023/08/15/1/"/>
    <id>https://iitii.github.io/2023/08/15/1/</id>
    <published>2023-08-15T14:09:13.000Z</published>
    <updated>2023-09-07T14:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刷机有风险, 后果自行承担</p></blockquote><ul><li>因为这个卡黑苹果支持有问题, 所以需要降级为 RX570, 才能正常黑苹果. 要不然显存只有几兆或者十几兆</li><li>之所以选择刷 RX570 的 vBios, 是因为 RX580 2048sp 是 RX570 的马甲</li></ul><p><img src="/images/macos/bmac/rx580/Untitled.png" alt="Untitled"></p><h2 id="检查当前型号和显存编号"><a href="#检查当前型号和显存编号" class="headerlink" title="检查当前型号和显存编号"></a>检查当前型号和显存编号</h2><p><img src="/images/macos/bmac/rx580/GPUZ.gif" alt="GPUZ.gif"></p><p><img src="/images/macos/bmac/rx580/%E6%98%BE%E5%AD%98.gif" alt="显存.gif"></p><h2 id="备份-vBios"><a href="#备份-vBios" class="headerlink" title="备份 vBios"></a>备份 vBios</h2><ul><li>点击 BIOS Version 旁边的 箭头即可导出</li></ul><h2 id="查找-vBios"><a href="#查找-vBios" class="headerlink" title="查找 vBios"></a>查找 vBios</h2><ul><li>打开 Google，为了方便，直接输入以下信息检索</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“RX <span class="number">570</span>” “Sapphire” K4G80325FC +site:techpowerup.com</span><br></pre></td></tr></table></figure><p><img src="/images/macos/bmac/rx580/Untitled%201.png" alt="Untitled"></p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHBvd2VydXAuY29tL3ZnYWJpb3MvMjM1MDQ4L3NhcHBoaXJlLXJ4NTcwLTgxOTItMTkxMDMx">https://www.techpowerup.com/vgabios/235048/sapphire-rx570-8192-191031<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>寻找适合自己的 vBIOS，查看 vBIOS 的信息，确保显存大小和显存颗粒跟你显卡的信息一致</li><li>Limits 部分主要涉及功耗相关(OC 超频)的, 不用太过关注.</li></ul><h2 id="下载刷写工具"><a href="#下载刷写工具" class="headerlink" title="下载刷写工具"></a>下载刷写工具</h2><blockquote><p><a href="#%E5%88%B7%E9%BB%91%E5%8F%98%E7%A0%96%E8%BF%98%E5%8E%9F%E6%81%A2%E5%A4%8D">工具下载</a>  </p></blockquote><ul><li>打开 TECHPOWERUP 的 AMDVBFlash <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHBvd2VydXAuY29tL2Rvd25sb2FkL2F0aS1hdGlmbGFzaC8=">下载界面<i class="fa fa-external-link-alt"></i></span></li><li>检查需要的版本, 点击 <code>Show older versions</code> 即可下载历史版本</li></ul><h2 id="刷入-vbios"><a href="#刷入-vbios" class="headerlink" title="刷入 vbios"></a>刷入 vbios</h2><blockquote><p>下载低版本工具</p></blockquote><ul><li>这里可能会提示版本 <code>P/N not match</code>, 换低版本的工具即可, 测试 3.05 版本可用.</li></ul><ol><li>工具和要刷入的 rom 放到 <code>C:/amdvflash</code> (路径纯英文字符, 不含空格,标点 不会触发其他的问题</li><li>打开且只能打开 <code>CMD</code>, 管理员身份</li><li>双击 <code>AMDVFlashDriverInstaller.exe</code></li><li>输入 <code>I</code>, 安装 driver</li><li>解锁 rom: <code>amdvbflash.exe -unlockrom 0</code></li><li>刷入 rom: <code>amdvbflash -f -p 0 XXXX.rom</code></li></ol><blockquote><p>#XXXX替换成你要刷入的 rom 名称，比如 amdvbflash -f -p 0 RX570.rom</p></blockquote><ol><li>如果显示 <code>Restart System To Complete VBIOS Update</code> 就表示完成了</li><li>双击 <code>AMDVFlashDriverInstaller.exe</code>, 输入 <code>U</code>, 卸载 driver</li><li>重启电脑安装驱动，就能在 GPU-Z 里看到新的显卡型号了</li></ol><p><img src="/images/macos/bmac/rx580/unlock.png" alt="unlock.png"></p><p><img src="/images/macos/bmac/rx580/flash.png" alt="flash.png"></p><h2 id="刷黑变砖还原恢复"><a href="#刷黑变砖还原恢复" class="headerlink" title="刷黑变砖还原恢复"></a>刷黑变砖还原恢复</h2><p>最后附上低版本 AMDVFlash 工具和蓝宝石官方 RX580 2048SP ROM，给忘记备份又刷黑的朋友留个后悔药，以及跟我同型号的 RX 570 ROM，省去你检索踩坑的时间</p><ul><li><a href="/images/macos/bmac/rx580/amdvbflash_windows_3.04.zip">amdvbflash_windows_3.04.zip</a></li><li><a href="/images/macos/bmac/rx580/bios.rom">原版 ROM</a></li><li><a href="/images/macos/bmac/rx580/Sapphire.RX570.8192.191031.rom">Sapphire.RX570.8192.191031.rom</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubXNwYWNlLmNjL2FyY2hpdmVzLzc1NQ==">https://www.mspace.cc/archives/755<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">当时整机收的, 没太注意. 后面才发现是 RX580 2048sp, 为了黑果所以需要降级为 RX570...</summary>
    
    
    
    <category term="bmac" scheme="https://iitii.github.io/categories/bmac/"/>
    
    
    <category term="amd" scheme="https://iitii.github.io/tags/amd/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 配置基于 Kerberos 的 ACL 访问控制鉴权</title>
    <link href="https://iitii.github.io/2023/08/01/1/"/>
    <id>https://iitii.github.io/2023/08/01/1/</id>
    <published>2023-08-01T02:04:41.000Z</published>
    <updated>2023-09-08T02:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>由于acl信息存储在zookeeper中，所以在没有启用zookeeper权限体系的情况下，任何用户理论上都可以执行 kafka-acls.sh</li></ul><h2 id="服务端启用-ACL"><a href="#服务端启用-ACL" class="headerlink" title="服务端启用 ACL"></a>服务端启用 ACL</h2><h3 id="添加配置到-config-server-properties"><a href="#添加配置到-config-server-properties" class="headerlink" title="添加配置到 config/server.properties"></a>添加配置到 config/server.properties</h3><ul><li>因为之前创建用户的 kafka kerberos 认证的 principal 为 <code>kafka/ubuntu@EXAMPLE.COM</code>, 所以这里 User 部分直接取 kafka 即可. 配置成集群的 superuser, superuser不受 ACL 限制.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许自动创建 Topic</span></span><br><span class="line"><span class="comment"># auto.create.topics.enable=true</span></span><br><span class="line"><span class="comment">#acl相关，配置后才能启用acl</span></span><br><span class="line">authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer</span><br><span class="line"><span class="comment"># 配置 superuser 为 kafka</span></span><br><span class="line">super.users=User:kafka</span><br><span class="line"><span class="comment"># 设置为true，ACL机制为黑名单机制，只有黑名单中的用户无法访问</span></span><br><span class="line"><span class="comment"># 默认为false，ACL机制为白名单机制，只有白名单中的用户可以访问</span></span><br><span class="line">allow.everyone.if.no.acl.found=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="检查已授权信息"><a href="#检查已授权信息" class="headerlink" title="检查已授权信息"></a>检查已授权信息</h2><ul><li>无返回即为无授权信息, 否则会显示所有 ACLs</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --list</span><br></pre></td></tr></table></figure><h2 id="添加-kerberos-用户"><a href="#添加-kerberos-用户" class="headerlink" title="添加 kerberos 用户"></a>添加 kerberos 用户</h2><ol><li>登陆 docker</li><li>添加 principal</li><li>创建 keytab 授权文件</li><li>验证授权是否成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it krb5 sh</span><br><span class="line">kadmin.local -q <span class="string">&#x27;addprinc -randkey acl/acl@EXAMPLE.COM&#x27;</span></span><br><span class="line">kadmin.local -q <span class="string">&quot;ktadd -k /etc/security/keytabs/acl_acl.keytab acl/acl@EXAMPLE.COM&quot;</span></span><br><span class="line">kinit -V -kt /home/ubuntu/docker-krb5-server/keytabs/acl.keytab  acl/acl@EXAMPLE.COM</span><br></pre></td></tr></table></figure><h2 id="创建客户端-jass-文件"><a href="#创建客户端-jass-文件" class="headerlink" title="创建客户端 jass 文件"></a>创建客户端 jass 文件</h2><ul><li><code>vim config/kafka_acl_jass.conf</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">KafkaClient &#123;</span><br><span class="line">    com.sun.security.auth.module.Krb5LoginModule required</span><br><span class="line">    useTicketCache=<span class="literal">true</span></span><br><span class="line">    serviceName=kafka</span><br><span class="line">    useKeyTab=<span class="literal">true</span></span><br><span class="line">    storeKey=<span class="literal">true</span></span><br><span class="line">    keyTab=<span class="string">&quot;/home/ubuntu/docker-krb5-server/keytabs/acl_acl.keytab&quot;</span></span><br><span class="line">    principal=<span class="string">&quot;acl/acl@EXAMPLE.COM&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><ul><li>需指定 KAFKA_HOME, krb5.conf, jaas.conf 等配置的绝对路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_HOME=/home/ubuntu/kafka</span><br><span class="line"><span class="built_in">export</span> KAFKA_OPTS=<span class="string">&quot; -Dzookeeper.sasl.client=false -Dsun.security.krb5.debug=true -Djava.security.krb5.conf=/home/ubuntu/kafka/config/krb5.conf -Djava.security.auth.login.config=/home/ubuntu/kafka/config/kafka_acl_jass.conf &quot;</span></span><br></pre></td></tr></table></figure><h2 id="授权-Topic及消费组-读权限"><a href="#授权-Topic及消费组-读权限" class="headerlink" title="授权 Topic及消费组 读权限"></a>授权 Topic及消费组 读权限</h2><ul><li>未授权之前, 除了 superuers  正常读写集群. 其他用户默认拒绝.</li></ul><blockquote><p>因为 kafka 鉴权是按消费组进行的, 所以授权之前需要明确 Consumer 的 group.id</p></blockquote><blockquote><p>以 config/comsumer.properties 里面的 test-consumer-group 为例</p></blockquote><ul><li>给 acl/<span class="exturl" data-url="bWFpbHRvOiYjeDYxOyYjeDYzOyYjeDZjOyYjNjQ7JiN4NDU7JiN4NTg7JiM2NTsmIzc3OyYjODA7JiM3NjsmI3g0NTsmIzQ2OyYjNjc7JiN4NGY7JiM3Nzs=">&#x61;&#x63;&#x6c;&#64;&#x45;&#x58;&#65;&#77;&#80;&#76;&#x45;&#46;&#67;&#x4f;&#77;<i class="fa fa-external-link-alt"></i></span> 用户, 授予对 Topic: <code>test_acl</code> 和消费组: <code>test-consumer-group</code> 的读权限</li></ul><blockquote><p>这里 acl/<span class="exturl" data-url="bWFpbHRvOiYjeDYxOyYjeDYzOyYjeDZjOyYjeDQwOyYjNjk7JiM4ODsmI3g0MTsmIzc3OyYjODA7JiN4NGM7JiM2OTsmI3gyZTsmI3g0MzsmI3g0ZjsmIzc3Ow==">&#x61;&#x63;&#x6c;&#x40;&#69;&#88;&#x41;&#77;&#80;&#x4c;&#69;&#x2e;&#x43;&#x4f;&#77;<i class="fa fa-external-link-alt"></i></span> 的 acl 可以简单理解成用户组之类的, 授权之后 acl/<span class="exturl" data-url="bWFpbHRvOiYjeDYxOyYjOTk7JiMxMDg7JiM5NTsmI3g2MTsmIzk5OyYjeDZjOyYjeDQwOyYjeDQ1OyYjeDU4OyYjeDQxOyYjNzc7JiM4MDsmI3g0YzsmIzY5OyYjeDJlOyYjeDQzOyYjNzk7JiN4NGQ7">&#x61;&#99;&#108;&#95;&#x61;&#99;&#x6c;&#x40;&#x45;&#x58;&#x41;&#77;&#80;&#x4c;&#69;&#x2e;&#x43;&#79;&#x4d;<i class="fa fa-external-link-alt"></i></span> 这个 principal 也享有同等权限. 所以如果想错开授权的话, 开头这个 acl 必须修改.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:acl --operation Read --topic test_acl --group test-consumer-group</span><br><span class="line"><span class="comment"># 移除读权限 --add 改成 --remove 即可</span></span><br><span class="line"><span class="comment"># kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=localhost:2181 --remove --allow-principal User:acl --operation Read --topic test_acl --group test-consumer-group</span></span><br></pre></td></tr></table></figure><h2 id="手动消费验证"><a href="#手动消费验证" class="headerlink" title="手动消费验证"></a>手动消费验证</h2><blockquote><p>至少需要两个 broker, 一个的话,大概率不能正常消费.</p></blockquote><blockquote><p>消费不到数据的时候, 先验证 kafka 是否配置完整, 所有节点是否都已启动</p></blockquote><blockquote><p>任何一步提示需要密码之类的报错, 大概率都是因为 kerberos 认证配置的问题, 如 jass 文件, 环境变量, 消费时未指定 comsumer.properties 等. <del>文件太多了很容易就忘记改了, 从而导致鉴权失败.</del></p></blockquote><p>日志: <code>$KAFKA_HOME/logs/server.log</code></p><h3 id="producer-properties"><a href="#producer-properties" class="headerlink" title="producer.properties"></a>producer.properties</h3><ul><li><code>export KAFKA_HOME KAFKA_OPTS</code> 配置, 追加以下内容到  config/producer.properties</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=GSSAPI</span><br><span class="line"><span class="comment"># service.name 同上</span></span><br><span class="line">sasl.kerberos.service.name=kafka</span><br></pre></td></tr></table></figure><ul><li>因为这里还未授权写权限所以会报错: <code>TopicAuthorizationException: Not authorized to access topics: [test_acl]</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-console-producer.sh --broker-list localhost:19092,localhost:19093 --producer.config config/producer.properties  --topic test_acl</span><br></pre></td></tr></table></figure><h3 id="consumer-properties"><a href="#consumer-properties" class="headerlink" title="consumer.properties"></a>consumer.properties</h3><ul><li><code>export KAFKA_HOME KAFKA_OPTS</code> 配置, 追加以下内容到  config/consumer.properties</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group.id=test-consumer-group</span><br><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=GSSAPI</span><br><span class="line"><span class="comment"># service.name 同上</span></span><br><span class="line">sasl.kerberos.service.name=kafka</span><br></pre></td></tr></table></figure><ul><li>如果没有权限的话, Comsumer 会直接退出.</li><li>这里已经授权了读权限, 所以会正常进入监听模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server localhost:19092,localhost:19093 --from-beginning --consumer.config config/consumer.properties --topic test_acl</span><br></pre></td></tr></table></figure><h2 id="授权-Topic-写权限"><a href="#授权-Topic-写权限" class="headerlink" title="授权 Topic 写权限"></a>授权 Topic 写权限</h2><ul><li>因为写入没有组的概念, 所以不需要对组进行授权.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:acl --operation Write --topic test_acl</span><br><span class="line"><span class="comment"># 移除写权限</span></span><br><span class="line"><span class="comment"># kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=localhost:2181 --remove --allow-principal User:acl --operation Write --topic test_acl</span></span><br></pre></td></tr></table></figure><h2 id="手动消费验证-1"><a href="#手动消费验证-1" class="headerlink" title="手动消费验证"></a>手动消费验证</h2><ul><li>在做一遍<a href="#%E6%89%8B%E5%8A%A8%E6%B6%88%E8%B4%B9%E9%AA%8C%E8%AF%81">之前的消费验证</a>, 这里可以看到 数据可以正常写入和消费.</li></ul><h2 id="启用授权后想无需授权访问-Topic"><a href="#启用授权后想无需授权访问-Topic" class="headerlink" title="启用授权后想无需授权访问 Topic?"></a>启用授权后想无需授权访问 Topic?</h2><ul><li>不能</li></ul>]]></content>
    
    
    <summary type="html">Kerberos都搭好了, 那就来弄个, 基于 Kerberos 的 ACL 访问控制鉴权吧...</summary>
    
    
    
    <category term="kafka" scheme="https://iitii.github.io/categories/kafka/"/>
    
    <category term="Kerberos" scheme="https://iitii.github.io/categories/kafka/Kerberos/"/>
    
    
    <category term="kafka" scheme="https://iitii.github.io/tags/kafka/"/>
    
    <category term="Kerberos" scheme="https://iitii.github.io/tags/Kerberos/"/>
    
    <category term="kdc" scheme="https://iitii.github.io/tags/kdc/"/>
    
    <category term="ACL" scheme="https://iitii.github.io/tags/ACL/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 集成 Kerberos 认证</title>
    <link href="https://iitii.github.io/2023/07/15/1/"/>
    <id>https://iitii.github.io/2023/07/15/1/</id>
    <published>2023-07-15T02:04:09.000Z</published>
    <updated>2023-09-08T02:04:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kerberos-搭建"><a href="#Kerberos-搭建" class="headerlink" title="Kerberos 搭建"></a>Kerberos 搭建</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNvbmZsdWVudC5pby9wbGF0Zm9ybS9jdXJyZW50L2thZmthL2F1dGhlbnRpY2F0aW9uX3Nhc2wvYXV0aGVudGljYXRpb25fc2FzbF9nc3NhcGkuaHRtbCNqYWFz">Configuring GSSAPI | Confluent Documentation<i class="fa fa-external-link-alt"></i></span></p><h3 id="创建-KDC"><a href="#创建-KDC" class="headerlink" title="创建 KDC"></a>创建 KDC</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2djYXZhbGNhbnRlODgwOC9kb2NrZXIta3JiNS1zZXJ2ZXIuZ2l0">https://github.com/gcavalcante8808/docker-krb5-server.git<i class="fa fa-external-link-alt"></i></span></p><ol><li><code>mkdir kdc &amp;&amp; cd kdc</code></li><li><code>vim docker-compose.yml</code></li><li>填入以下内容</li><li><code>docker-compose up -d</code></li></ol><ul><li>容器里面使用了 supervisor, 占用了 9001 端口, 可能会和 minio 产生冲突  推荐修改 supervisor 配置文件的端口. 共两处  docker cp krb5:/etc/supr*.conf .</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kdc:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcavalcante8808/krb5-server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">krb5</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="comment"># 避免 hostname 解析, hosts 映射问题</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="comment"># networks:</span></span><br><span class="line">    <span class="comment">#   - kafka-kerbose</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#  - &quot;88:88&quot;</span></span><br><span class="line">    <span class="comment">#  - &quot;464:464&quot;</span></span><br><span class="line">    <span class="comment">#  - &quot;749:749&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KRB5_REALM:</span> <span class="string">EXAMPLE.COM</span></span><br><span class="line">      <span class="attr">KRB5_KDC:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./data:/var/lib/krb5kdc</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./keytabs:/etc/security/keytabs</span></span><br></pre></td></tr></table></figure><h3 id="添加-principal"><a href="#添加-principal" class="headerlink" title="添加 principal"></a>添加 principal</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kadmin.local -q <span class="string">&#x27;addprinc -randkey kafka/ubuntu@EXAMPLE.COM&#x27;</span></span><br><span class="line">kadmin.local -q <span class="string">&quot;ktadd -k /etc/security/keytabs/kafka.keytab kafka/ubuntu@EXAMPLE.COM&quot;</span></span><br></pre></td></tr></table></figure><h3 id="宿主机添加-krb5-conf"><a href="#宿主机添加-krb5-conf" class="headerlink" title="宿主机添加 krb5.conf"></a>宿主机添加 krb5.conf</h3><ul><li><code>yum install krb5-workstation</code></li><li><code>vim /etc/krb5.conf</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configuration snippets may be placed in this directory as well</span></span><br><span class="line"><span class="string">includedir</span> <span class="string">/etc/krb5.conf.d/</span></span><br><span class="line"></span><br><span class="line">[<span class="string">logging</span>]</span><br><span class="line"> <span class="string">default</span> <span class="string">=</span> <span class="string">FILE:/var/log/krb5libs.log</span></span><br><span class="line"> <span class="string">kdc</span> <span class="string">=</span> <span class="string">FILE:/var/log/krb5kdc.log</span></span><br><span class="line"> <span class="string">admin_server</span> <span class="string">=</span> <span class="string">FILE:/var/log/kadmind.log</span></span><br><span class="line"></span><br><span class="line">[<span class="string">libdefaults</span>]</span><br><span class="line"> <span class="string">dns_lookup_realm</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"> <span class="string">ticket_lifetime</span> <span class="string">=</span> <span class="string">24h</span></span><br><span class="line"> <span class="string">renew_lifetime</span> <span class="string">=</span> <span class="string">7d</span></span><br><span class="line"> <span class="string">forwardable</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"> <span class="string">rdns</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"> <span class="string">pkinit_anchors</span> <span class="string">=</span> <span class="string">FILE:/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"> <span class="string">default_realm</span> <span class="string">=</span> <span class="string">EXAMPLE.COM</span></span><br><span class="line"> <span class="string">default_ccache_name</span> <span class="string">=</span> <span class="string">KEYRING:persistent:%&#123;uid&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要修改 kdc, admin_server 地址</span></span><br><span class="line">[<span class="string">realms</span>]</span><br><span class="line">  <span class="string">EXAMPLE.COM</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="string">kdc</span> <span class="string">=</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="string">:88</span></span><br><span class="line">    <span class="string">admin_server</span> <span class="string">=</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">[<span class="string">domain_realm</span>]</span><br><span class="line"><span class="comment"># .example.com = EXAMPLE.COM</span></span><br><span class="line"><span class="comment"># example.com = EXAMPLE.COM</span></span><br></pre></td></tr></table></figure><h3 id="验证-Kerberos-可用"><a href="#验证-Kerberos-可用" class="headerlink" title="验证 Kerberos 可用"></a>验证 Kerberos 可用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志: /var/log/k*</span></span><br><span class="line">kinit -V -kt /home/ubuntu/docker-krb5-server/keytabs/kafka.keytab  kafka/ubuntu@EXAMPLE.COM</span><br></pre></td></tr></table></figure><h2 id="Kafka-配置修改"><a href="#Kafka-配置修改" class="headerlink" title="Kafka 配置修改"></a>Kafka 配置修改</h2><h3 id="server-properties"><a href="#server-properties" class="headerlink" title="server.properties"></a>server.properties</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为 SASL_PLAINTEXT 或者 SASL_SSL</span></span><br><span class="line"><span class="string">listeners=SASL_PLAINTEXT://:19092</span></span><br><span class="line"><span class="string">advertised.listeners=SASL_PLAINTEXT://:19092</span></span><br><span class="line"><span class="comment"># 同时启用需认证 19092 和无需认证 19093</span></span><br><span class="line"><span class="comment">#listeners=SASL_PLAINTEXT://:19092,PLAINTEXT://:19093</span></span><br><span class="line"><span class="comment">#advertised.listeners=SASL_PLAINTEXT://:19092,PLAINTEXT://:19093</span></span><br><span class="line"></span><br><span class="line"><span class="string">security.inter.broker.protocol=SASL_PLAINTEXT</span></span><br><span class="line"><span class="string">sasl.mechanism.inter.broker.protocol=GSSAPI</span></span><br><span class="line"><span class="string">sasl.enabled.mechanisms=GSSAPI</span></span><br><span class="line"><span class="comment"># 如果 principal=&quot;kafka2/kafka1.hostname.com@EXAMPLE.COM&quot;; 那么这里应该是 kafka2</span></span><br><span class="line"><span class="string">sasl.kerberos.service.name=kafka</span></span><br></pre></td></tr></table></figure><h3 id="kafka-server-jaas-conf"><a href="#kafka-server-jaas-conf" class="headerlink" title="kafka_server_jaas.conf"></a>kafka_server_jaas.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 替换路径</span><br><span class="line">KafkaServer &#123;</span><br><span class="line">    com.sun.security.auth.module.Krb5LoginModule required</span><br><span class="line">    useKeyTab=<span class="literal">true</span></span><br><span class="line">    storeKey=<span class="literal">true</span></span><br><span class="line">    keyTab=<span class="string">&quot;/home/ubuntu/docker-krb5-server/keytabs/kafka.keytab&quot;</span></span><br><span class="line">    principal=<span class="string">&quot;kafka/ubuntu@EXAMPLE.COM&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">// 不启用 zk </span><br><span class="line">// Zookeeper client authentication</span><br><span class="line">// Client &#123;</span><br><span class="line">//     com.sun.security.auth.module.Krb5LoginModule required</span><br><span class="line">//     useKeyTab=<span class="literal">true</span></span><br><span class="line">//     storeKey=<span class="literal">true</span></span><br><span class="line">//     keyTab=<span class="string">&quot;/home/ubuntu/docker-krb5-server/keytabs/kafka.keytab&quot;</span></span><br><span class="line">//     principal=<span class="string">&quot;kafka/ubuntu@EXAMPLE.COM&quot;</span>;</span><br><span class="line">// &#125;;</span><br><span class="line">KafkaClient &#123;</span><br><span class="line">    com.sun.security.auth.module.Krb5LoginModule required</span><br><span class="line">    useTicketCache=<span class="literal">true</span></span><br><span class="line">    serviceName=kafka</span><br><span class="line">    useKeyTab=<span class="literal">true</span></span><br><span class="line">    storeKey=<span class="literal">true</span></span><br><span class="line">    keyTab=<span class="string">&quot;/home/ubuntu/docker-krb5-server/keytabs/kafka.keytab&quot;</span></span><br><span class="line">    principal=<span class="string">&quot;kafka/ubuntu@EXAMPLE.COM&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="kafka-server-start-sh"><a href="#kafka-server-start-sh" class="headerlink" title="kafka-server-start.sh"></a>kafka-server-start.sh</h3><ul><li>测试的时候可以不加 <code>-dameon</code>, 日志直接输出到终端, 更直观</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_HOME=/home/ubuntu/kafka</span><br><span class="line"><span class="comment"># 替换路径</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_OPTS=<span class="string">&quot; -Dzookeeper.sasl.client=false -Dsun.security.krb5.debug=true -Djava.security.krb5.conf=/home/ubuntu/kafka/config/krb5.conf -Djava.security.auth.login.config=/home/ubuntu/kafka/config/kafka_server_jaas.conf &quot;</span></span><br></pre></td></tr></table></figure><h2 id="Kafka-备节点"><a href="#Kafka-备节点" class="headerlink" title="Kafka 备节点"></a>Kafka 备节点</h2><ul><li>直接复制即可, 需要修改 broker id, KAFKA_HOME, server.properties 里面的 listeners 相关配置.</li><li>主备节点的 principal 可一致, 为了安全也可以替换为其他 principal</li></ul><h2 id="手动消费验证"><a href="#手动消费验证" class="headerlink" title="手动消费验证"></a>手动消费验证</h2><blockquote><p>至少需要两个 broker, 一个的话,大概率不能正常消费.</p></blockquote><blockquote><p>消费不到数据的时候, 先验证 kafka 是否配置完整, 所有节点是否都已启动</p></blockquote><blockquote><p>任何一步提示需要密码之类的报错, 大概率都是因为 kerberos 认证配置的问题, 如 jass 文件, 环境变量, 消费时未指定 comsumer.properties 等. <del>文件太多了很容易就忘记改了, 从而导致鉴权失败.</del></p></blockquote><p>日志: <code>$KAFKA_HOME/logs/server.log</code></p><h3 id="producer-properties"><a href="#producer-properties" class="headerlink" title="producer.properties"></a>producer.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=GSSAPI</span><br><span class="line"><span class="comment"># service.name 同上</span></span><br><span class="line">sasl.kerberos.service.name=kafka</span><br></pre></td></tr></table></figure><ol><li><code>export KAFKA_HOME KAFKA_OPTS</code> 配置</li><li><code>./bin/kafka-console-producer.sh --broker-list 192.168.1.166:19092,192.168.1.166:19093 --topic test --producer.config config/producer.properties</code></li></ol><h3 id="consumer-properties"><a href="#consumer-properties" class="headerlink" title="consumer.properties"></a>consumer.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=GSSAPI</span><br><span class="line"><span class="comment"># service.name 同上</span></span><br><span class="line">sasl.kerberos.service.name=kafka</span><br></pre></td></tr></table></figure><ol><li><code>export KAFKA_HOME KAFKA_OPTS</code> 配置</li><li><code>./bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.166:19092,192.168.1.166:19093 --consumer.config config/consumer.properties --topic test --from-beginning</code></li></ol><blockquote><p>启动后在 <code>kafka producer</code> 终端输入, 在 <code>consumer</code> 终端即可看到数据</p></blockquote><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="容器-kdc-conf-参考"><a href="#容器-kdc-conf-参考" class="headerlink" title="容器 kdc.conf 参考"></a>容器 kdc.conf 参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[kdcdefaults]</span><br><span class="line">    kdc_listen = 88</span><br><span class="line">    kdc_tcp_listen = 88</span><br><span class="line">    </span><br><span class="line">[realms]</span><br><span class="line">    EXAMPLE.COM = &#123;</span><br><span class="line">        kadmin_port = 749</span><br><span class="line">        max_life = 12h 0m 0s</span><br><span class="line">        max_renewable_life = 7d 0h 0m 0s</span><br><span class="line">        master_key_type = aes256-cts</span><br><span class="line">        supported_enctypes = aes256-cts:normal aes128-cts:normal</span><br><span class="line">        default_principal_flags = +preauth</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">[logging]</span><br><span class="line">    kdc = FILE:/var/log/krb5kdc.<span class="built_in">log</span></span><br><span class="line">    admin_server = FILE:/var/log/kadmin.log</span><br><span class="line">    default = FILE:/var/log/krb5lib.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">搭建 KDC 并集成到 kafka</summary>
    
    
    
    <category term="kafka" scheme="https://iitii.github.io/categories/kafka/"/>
    
    <category term="Kerberos" scheme="https://iitii.github.io/categories/kafka/Kerberos/"/>
    
    
    <category term="kafka" scheme="https://iitii.github.io/tags/kafka/"/>
    
    <category term="Kerberos" scheme="https://iitii.github.io/tags/Kerberos/"/>
    
    <category term="kdc" scheme="https://iitii.github.io/tags/kdc/"/>
    
  </entry>
  
  <entry>
    <title>联通光猫HG8347R路由模式下无法正常端口映射/DMZ</title>
    <link href="https://iitii.github.io/2023/07/01/1/"/>
    <id>https://iitii.github.io/2023/07/01/1/</id>
    <published>2023-07-01T14:06:44.000Z</published>
    <updated>2023-09-07T14:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>实际上是因为光猫 iptables 的原因, 需手动操作</li></ul><h2 id="光猫版本"><a href="#光猫版本" class="headerlink" title="光猫版本"></a>光猫版本</h2><ul><li>光猫型号 HG8347R, 固件版本 R17, 按常规路线得降级固件才能进维护模式, 然后才能刷机降级</li><li>光猫改桥接, 直接打运营商电话即可, 运营商直接下发策略</li></ul><h2 id="光猫设置"><a href="#光猫设置" class="headerlink" title="光猫设置"></a>光猫设置</h2><blockquote><p>如果发现无法 telnet 可以先将防火墙改成禁用</p></blockquote><ul><li>因为 ipv4 规则太多了, 以 ipv6 规则为例</li></ul><ol><li>telnet 登陆</li><li>用户提权</li><li>修改 iptables</li></ol><p><img src="/images/openwrt/HG8347R/cat.png" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.1.1 root/admin</span><br></pre></td></tr></table></figure><p><img src="/images/openwrt/HG8347R/telnet.png" alt="Untitled"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看现有规则</span></span><br><span class="line">display firewall rule address-family inet</span><br><span class="line"><span class="comment">#以 ipv6 规则为例</span></span><br><span class="line">firewall rule delete chain FWD_WANUPDOWN index 1 address-family inet6</span><br><span class="line">firewall rule delete chain FWD_WANU index 1 address-family inet6</span><br><span class="line">firewall rule delete chain FWD_SIP_CHECK index 1 address-family inet6</span><br><span class="line">firewall rule delete chain FWD_SIP_CHECK index 1 address-family inet6</span><br><span class="line">firewall rule delete chain FWD_SIP_CHECK index 1 address-family inet6</span><br><span class="line">firewall rule delete chain FWD_SIP_CHECK index 1 address-family inet6</span><br><span class="line"><span class="comment">#查看现有规则</span></span><br><span class="line">display firewall rule address-family inet</span><br></pre></td></tr></table></figure><h2 id="ipv6-地址选择"><a href="#ipv6-地址选择" class="headerlink" title="ipv6 地址选择"></a>ipv6 地址选择</h2><ul><li>240x 开头的 temporary 地址</li></ul><h2 id="iperf-测速"><a href="#iperf-测速" class="headerlink" title="iperf 测速"></a>iperf 测速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP</span></span><br><span class="line">iperf3 -p 58000 -b 1000M -c 2408:8207:18a0:5f30:7109:3215:1be6:e55f</span><br><span class="line">iperf3 -p 58000 -b 1000M -c 2408:8207:18a0:5f30:7109:3215:1be6:e55f -R</span><br><span class="line"><span class="comment"># UDP</span></span><br><span class="line">iperf3 -p 58000 -b 1000M -c 2408:8207:18a0:5f30:7109:3215:1be6:e55f -u</span><br><span class="line">iperf3 -p 58000 -b 1000M -c 2408:8207:18a0:5f30:7109:3215:1be6:e55f -u -R</span><br></pre></td></tr></table></figure><h2 id="光猫真的封了所有入站请求吗"><a href="#光猫真的封了所有入站请求吗" class="headerlink" title="光猫真的封了所有入站请求吗?"></a>光猫真的封了所有入站请求吗?</h2><ul><li>如封</li><li>实测: 光猫会禁止国内 IP 访问 高端口 http, 但是国外 IP 可以访问…<ul><li>桥接后正常</li></ul></li></ul>]]></content>
    
    
    <summary type="html">因为没法直接在光猫上面改桥接, 只能是路由模式. 正常按 DMZ/端口映射 操作完, 防火墙也关了. 还是是访问不了</summary>
    
    
    
    <category term="漏油器" scheme="https://iitii.github.io/categories/%E6%BC%8F%E6%B2%B9%E5%99%A8/"/>
    
    
    <category term="光猫" scheme="https://iitii.github.io/tags/%E5%85%89%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>红米 AX3000/CR8806 刷入 Openwrt 记录</title>
    <link href="https://iitii.github.io/2023/06/07/1/"/>
    <id>https://iitii.github.io/2023/06/07/1/</id>
    <published>2023-06-07T14:08:57.000Z</published>
    <updated>2023-09-07T14:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刷机有风险，没有需要就别刷了   </p></blockquote><ul><li>虽然刷完内存, 闪存都没剩多少, 但是够用. 稳定好几个月了  </li></ul><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><p><img src="/images/openwrt/ax3000/Untitled.png" alt="Untitled"></p><p><img src="/images/openwrt/ax3000/66052d1439e6f51f0d83e98de6c6cc2.jpg" alt="66052d1439e6f51f0d83e98de6c6cc2.jpg"></p><p><img src="/images/openwrt/ax3000/cb21250d0d993aa765631924864d474.jpg" alt="cb21250d0d993aa765631924864d474.jpg"></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>TTL 芯片，推荐 CH341</li><li>杜邦线若干</li><li>Windows 电脑（带RJ45）</li><li>网线</li></ul><blockquote><p>不一定需要的</p></blockquote><ul><li>曲别针</li><li>十字螺丝刀</li><li>电烙铁，松香，焊锡丝</li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li>TFTP 客户端</li><li>MiFlashTool</li><li>串口软件</li><li>ssh client</li></ul><h2 id="TTL-位置"><a href="#TTL-位置" class="headerlink" title="TTL 位置"></a>TTL 位置</h2><blockquote><p>M81 的主板</p></blockquote><p><img src="/images/openwrt/ax3000/Untitled%201.png" alt="Untitled"></p><blockquote><p>M79 的主板</p></blockquote><p><img src="/images/openwrt/ax3000/Untitled%202.png" alt="Untitled"></p><p><img src="/images/openwrt/ax3000/Untitled%203.png" alt="Untitled"></p><ul><li>从这几张图里面可以看出 TTL 串口都是在路由器右上角的。如果不想拆机的话， 可以通过曲别针之类的，下面用手电筒照明，曲别针从上面捅进去。</li></ul><h2 id="TTL排线"><a href="#TTL排线" class="headerlink" title="TTL排线"></a>TTL排线</h2><h3 id="曲别针大法"><a href="#曲别针大法" class="headerlink" title="曲别针大法"></a>曲别针大法</h3><ol><li>找了个杜邦线，拆了3根线，剪到合适的长度，大概10cm；</li><li>找3个回形针，掰成上图形状，然后将杜邦线焊在上面；用3M电工胶带绑好；</li><li>TTL口在右上角，用手电筒在底下照着，上面通过散热孔将回形针插进去，里面四个孔（从左至右是VCC，RX，GND，TX），VCC不接，其余与TTL模块交叉线接好；</li></ol><p><img src="/images/openwrt/ax3000/Untitled%204.png" alt="Untitled"></p><p><img src="/images/openwrt/ax3000/214859jiyxiylypqi0m0mu.jpg" alt="214859jiyxiylypqi0m0mu.jpg"></p><p><img src="/images/openwrt/ax3000/214859faxau4uqu40qwr0z.jpg" alt="214859faxau4uqu40qwr0z.jpg"></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL3RocmVhZC04MjcyMzIxLTEtMS5odG1s">记CR8808不拆机刷集客AP过程，在8806固件下开启ssh-小米无线路由器以及小米无线相关的设备-恩山无线论坛 -  Powered by Discuz!<i class="fa fa-external-link-alt"></i></span></p><h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><ul><li>CR8806 只有背部两个螺丝， 前面板是用卡扣固定的。螺丝都在标签纸下面，可能会感觉到多个螺丝孔，但实际上只有两个孔是通的且有螺丝。</li><li>下方应该两个卡扣，没拍到。其他都弄开之后下面的影响不大。</li><li>使用杜邦线插在TTL的位置，连接模块即可。或者自己把TTL排针焊回去。</li></ul><p><img src="/images/openwrt/ax3000/Untitled%205.png" alt="Untitled"></p><h2 id="TTL-通讯"><a href="#TTL-通讯" class="headerlink" title="TTL 通讯"></a>TTL 通讯</h2><blockquote><p>一般重启的时候串口就会有日志输出</p></blockquote><ul><li>TTL 从左至右是VCC，RX，GND，TX</li><li>GND 连接GND， TX连接RX，RX连接TX</li><li>短接2，3针，进入TTL功能</li><li>插上串口模块，打开设备管理器，安装驱动</li><li>检查设备管理器实际通讯口名称，如 COM4</li><li>串口软件（Putty）连接串口，填实际通讯口名称，波特率 9600。 如果乱码，调整为 115200</li></ul><blockquote><p>驱动下载， 选择第一个 EXE 即可：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2NoLmNuL2Rvd25sb2Fkcy9jYXRlZ29yeS82Ny5odG1sP2ZlYXR1cmU9VVNCJUU4JUJEJUFDJUU0JUI4JUIyJUU1JThGJUEzJnByb2R1Y3RfbmFtZT1DSDM0MQ==">https://www.wch.cn/downloads/category/67.html?feature=USB转串口&amp;product_name=CH341<i class="fa fa-external-link-alt"></i></span></p></blockquote><blockquote><p>我这里用的是 CH341A</p></blockquote><p><img src="/images/openwrt/ax3000/Untitled.jpeg" alt="Untitled"></p><h2 id="启用-UART"><a href="#启用-UART" class="headerlink" title="启用 UART"></a>启用 UART</h2><table><thead><tr><th>Device</th><th>URL</th></tr></thead><tbody><tr><td>Redmi AX3000</td><td><span class="exturl" data-url="aHR0cHM6Ly9jZG4uY25iajEuZmRzLmFwaS5taS1pbWcuY29tL3hpYW9xaWFuZy9yb20vcmE4MS9taXdpZmlfcmE4MV9maXJtd2FyZV8xZGQ2OWNfMS4wLjMzLmJpbg==">https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/ra81/miwifi_ra81_firmware_1dd69c_1.0.33.bin<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Xiaomi CR8806</td><td><span class="exturl" data-url="aHR0cHM6Ly9jZG4uY25iajEuZmRzLmFwaS5taS1pbWcuY29tL3hpYW9xaWFuZy9yb20vY3I4ODA2L21pd2lmaV9jcjg4MDZfZmlybXdhcmVfZmU3MGJfNi4yLjE0LmJpbg==">https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/cr8806/miwifi_cr8806_firmware_fe70b_6.2.14.bin<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Xiaomi CR8808</td><td><span class="exturl" data-url="aHR0cHM6Ly9jZG4uY25iajEuZmRzLmFwaS5taS1pbWcuY29tL3hpYW9xaWFuZy9yb20vY3I4ODA4L21pd2lmaV9jcjg4MDhfZmlybXdhcmVfOWQyMTZfNi4yLjExLmJpbg==">https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/cr8808/miwifi_cr8808_firmware_9d216_6.2.11.bin<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Xiaomi CR8809</td><td><span class="exturl" data-url="aHR0cHM6Ly9jZG4uY25iajEuZmRzLmFwaS5taS1pbWcuY29tL3hpYW9xaWFuZy9yb20vY3I4ODA5L21pd2lmaV9jcjg4MDlfZmlybXdhcmVfYjgxNGFfNi4yLjEwMi5iaW4=">https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/cr8809/miwifi_cr8809_firmware_b814a_6.2.102.bin<i class="fa fa-external-link-alt"></i></span></td></tr></tbody></table><ol><li>连接网线到 LAN1口</li><li>接好TTL，正常通讯</li><li>下载对应版本 ROM 包</li><li>建议关闭杀毒软件后再打开小米路由器修复工具，选择本地上传刷机ROM包；</li><li>选择网卡：请选择与路由器LAN口相连的网卡；<br>（此步骤将使用管理员权限为用户更改网卡配置，以确保路由器和电脑处于同一局域网。关闭应用时会提醒并自动恢复网卡配置。）</li><li>网卡配置成功后，先断开路由器电源，然后按住Reset键再接通电源，直到橙灯闪烁松开Reset键；</li><li>等待大约3-5分钟，蓝灯闪烁表示刷机成功，需要断电重启路由器；如果红灯闪烁表示刷机失败，请检查以上的刷机过程并重新进行刷机操作。</li><li>监听串口日志，有输出时，立马按中断 U-boot</li><li>执行以下命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenv boot_wait on</span><br><span class="line">setenv uart_en 1</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure><blockquote><p>正常保存则代表 UART 启用成功</p></blockquote><h2 id="刷入-Openwrt"><a href="#刷入-Openwrt" class="headerlink" title="刷入 Openwrt"></a>刷入 Openwrt</h2><ol><li>下载 <code>[openwrt-ipq50xx-arm-redmi_ax3000-squashfs-nand-factory.ubi](https://github.com/hzyitc/openwrt-redmi-ax3000/releases/latest/download/openwrt-ipq50xx-arm-redmi_ax3000-squashfs-nand-factory.ubi)</code> 并且放置于本机 TFTP 根目录</li><li>ipconfig 查看当前电脑IP，假设为 192.168.1.2， 执行以下命令以刷入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This router ip</span></span><br><span class="line">setenv ipaddr 192.168.1.2</span><br><span class="line"><span class="comment"># TFTP server ip</span></span><br><span class="line">setenv serverip 192.168.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download the firmware to the RAM</span></span><br><span class="line">tftpboot openwrt-ipq50xx-arm-redmi_ax3000-squashfs-nand-factory.ubi</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flash it as system 2</span></span><br><span class="line">flash rootfs_1</span><br><span class="line">setenv flag_try_sys2_failed 0</span><br><span class="line">setenv flag_boot_rootfs 1</span><br><span class="line">setenv flag_last_success 1</span><br><span class="line">saveenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flash it as system 1</span></span><br><span class="line"><span class="comment"># flash rootfs</span></span><br><span class="line"><span class="comment"># setenv flag_try_sys1_failed 0</span></span><br><span class="line"><span class="comment"># setenv flag_boot_rootfs 0</span></span><br><span class="line"><span class="comment"># setenv flag_last_success 0</span></span><br><span class="line"><span class="comment"># saveenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reboot</span></span><br><span class="line">reset</span><br></pre></td></tr></table></figure><ul><li>刷入完成后，打开网页即可看到熟悉的 Openwrt 界面</li><li>如果需要密码、忘记密码，可以直接在串口软件里面按几下回车，输入 passwd 重置密码</li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul><li>将 TTL 焊接出来，方便以后使用</li><li>自己编译固件，添加中文, wireguard, vnstat, upnp, frps, frpc 支持</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h6eWl0Yy9vcGVud3J0LXJlZG1pLWF4MzAwMA==">https://github.com/hzyitc/openwrt-redmi-ax3000<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0lJVElJL29wZW53cnQtcmVkbWktYXgzMDAw">https://github.com/IITII/openwrt-redmi-ax3000<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4MzU3NDcvYXJ0aWNsZS9kZXRhaWxzLzEyMjIxNDkxNQ==">openwrt开启upnp_openwrt upnp_锅锅是锅锅的博客-CSDN博客<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/openwrt/ax3000/Untitled%206.png" alt="Untitled"></p><h3 id="中文设置"><a href="#中文设置" class="headerlink" title="中文设置"></a>中文设置</h3><ul><li>.config 添加以下内容, 然后执行 <code>make menuconfig</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_LUCI_LANG_zh_Hans<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>base<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>opkg<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">#<span class="comment">----</span></span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>ddns<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>firewall<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>frpc<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>frps<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>m</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>mwan3<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>m</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>upnp<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br><span class="line">CONFIG_PACKAGE_luci<span class="operator">-</span>i18n<span class="operator">-</span>wireguard<span class="operator">-</span>zh<span class="operator">-</span>cn<span class="operator">=</span>y</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要想弄个 frps, wireguard, upnp 稳定漏油器, 于是开始了埋坑之旅...</summary>
    
    
    
    <category term="openwrt" scheme="https://iitii.github.io/categories/openwrt/"/>
    
    
    <category term="openwrt" scheme="https://iitii.github.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>VnStat 数据备份恢复</title>
    <link href="https://iitii.github.io/2023/05/15/1/"/>
    <id>https://iitii.github.io/2023/05/15/1/</id>
    <published>2023-05-15T14:03:08.000Z</published>
    <updated>2023-09-07T14:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><ul><li>sqlite3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sqlite3 -y</span><br></pre></td></tr></table></figure><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><ul><li>将生成的 <code>vnstat_db.sql</code> 保存好</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">systemctl stop vnstat.service</span><br><span class="line">cd /var/lib/vnstat</span><br><span class="line">sqlite3 vnstat.db .dump &gt;vnstat_db.sql</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><ul><li>如果迁移前后的接口名称不一致, 可以修改 <code>vnstat_db.sql</code> 第 21 行的接口名称.</li><li>导入后通过 <code>vnstat</code> 命令验证数据的完整性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">systemctl stop vnstat.service</span><br><span class="line">cd /var/lib/vnstat</span><br><span class="line">rm vnstat.db</span><br><span class="line">cat vnstat_db.sql | sqlite3 vnstat.db</span><br><span class="line">chown vnstat:vnstat vnstat.db</span><br><span class="line">systemctl start vnstat.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">有点时候换服务器, 想保留之前的 vnstat 的历史记录</summary>
    
    
    
    <category term="linux" scheme="https://iitii.github.io/categories/linux/"/>
    
    
    <category term="backup" scheme="https://iitii.github.io/tags/backup/"/>
    
    <category term="vnstat" scheme="https://iitii.github.io/tags/vnstat/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt ssh key 和 password 均正确但是无法登陆</title>
    <link href="https://iitii.github.io/2023/05/01/1/"/>
    <id>https://iitii.github.io/2023/05/01/1/</id>
    <published>2023-05-01T14:08:35.000Z</published>
    <updated>2023-09-07T14:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>User &#39;root&#39; has invalid shell, rejected</code></p></blockquote><blockquote><p><code>zsh: applet not found</code></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>openwrt 无法登陆, 正确配置 ssh key 和 password, 均无法登陆, 一直提示重新输入密码.</li><li>openwrt 网页可以正常打开, 登陆</li><li>openwrt 使用 dropbear 代替 openssh-server 进行 ssh 管理</li></ul><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ol><li>登陆网页, 打开系统日志</li><li>尝试 ssh 登陆</li><li>ssh 登陆失败后刷新系统日志页面, 并检查最新日志</li><li>日志里面显示 <code>User &#39;root&#39; has invalid shell, rejected</code></li><li>系统 → 软件包 → 搜索安装 Custom command(这个限制挺多的, 不支持管道, 执行结果不显示, 一直 loading)</li><li>打开 F12, 添加执行 <code>cat /etc/passwd</code>, F12 里面最新的 cfg 开头的 XHR 请求即为命令执行的结果.</li><li><code>/etc/passwd</code> 里面 root 的 shell 是 /usr/bin/zsh (也可以自己再测试下文件是否存在)</li><li>系统 → 软件包 → 搜索安装  zsh</li><li>尝试 ssh 登陆, 如果成功即结束</li><li>ssh 日志提示 <code>zsh: applet not found</code>, <code>Error relocating /usr/bin/zsh: xxx: symbol not found</code></li><li>将 <code>/etc/passwd</code> 的内容在外部编辑, 将 root shell 编写为 <code>/bin/ash</code>, 然后通过 <code>Custom command</code> 使用 wget -O 进行文件覆盖(最好提前备份)</li><li>在 <span class="exturl" data-url="aHR0cHM6Ly9idXN5Ym94Lm5ldC9kb3dubG9hZHMvYmluYXJpZXMv">https://busybox.net/downloads/binaries/<i class="fa fa-external-link-alt"></i></span> 根据 CPU 版本下载对应版本 busybox, 然后通过 <code>Custom command</code> 使用 wget -O 进行文件覆盖 <code>/bin/busybox</code> (最好提前备份)</li></ol><blockquote><p>如 状态页面显示 CPU 架构为: <code>ARMv7 Processor rev 0 (v7l)</code>, 则下载 <code>busybox-armv7l</code> 即可</p></blockquote><ol><li>通过 <code>Custom command</code> 执行 <code>chmod +x /bin/busybox</code></li><li>重新尝试登陆, 登陆成功</li></ol>]]></content>
    
    
    <summary type="html">有的时候明明登陆信息都正常, 就是登陆不上漏油器...</summary>
    
    
    
    
    <category term="openwrt" scheme="https://iitii.github.io/tags/openwrt/"/>
    
    <category term="ssh" scheme="https://iitii.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下快速查找/删除命中关键词的 Maven 依赖</title>
    <link href="https://iitii.github.io/2023/04/15/1/"/>
    <id>https://iitii.github.io/2023/04/15/1/</id>
    <published>2023-04-15T14:11:12.000Z</published>
    <updated>2023-09-07T14:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅限于 MacOS, linux 下面路径不太一样, 自行调整  </p></blockquote><h2 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h2><ul><li>添加到 <code>~/.zshrc</code> 或者 <code>~/.bashrc</code> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">findJars</span></span>() &#123;</span><br><span class="line">  jar_name=<span class="variable">$1</span></span><br><span class="line">  rmJar=<span class="variable">$2</span></span><br><span class="line">  <span class="built_in">set</span> -x</span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="variable">$jar_name</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> jar_name rm&quot;</span></span><br><span class="line">    <span class="built_in">set</span> +x</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    array=(<span class="string">&quot;<span class="variable">$HOME</span>/.m2/repository&quot;</span> <span class="string">&quot;<span class="variable">$HOME</span>/.ivy2/cache&quot;</span> <span class="string">&quot;<span class="variable">$HOME</span>/Library/Caches/Coursier&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> [[ -z <span class="variable">$rmJar</span> ]]; <span class="keyword">then</span></span><br><span class="line">        find <span class="variable">$i</span> -name <span class="string">&quot;<span class="variable">$jar_name</span>&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        find <span class="variable">$i</span> -name <span class="string">&quot;<span class="variable">$jar_name</span>&quot;</span> | xargs <span class="built_in">rm</span> -rf</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">set</span> +x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找-hive-相关-jar-包"><a href="#查找-hive-相关-jar-包" class="headerlink" title="查找 hive 相关 jar 包"></a>查找 hive 相关 jar 包</h2><ul><li><code>findJars &quot;*hive-exec*&quot;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">❯ findJars &quot;*hive-exec*&quot;</span><br><span class="line">+findJars:4&gt; [[ -z &#x27;*hive-exec*&#x27; ]]</span><br><span class="line">+findJars:9&gt; array=( /Users/iitii/.m2/repository /Users/iitii/.ivy2/cache /Users/iitii/Library/Caches/Coursier )</span><br><span class="line">+findJars:10&gt; i=/Users/iitii/.m2/repository</span><br><span class="line">+findJars:11&gt; [[ -z &#x27;&#x27; ]]</span><br><span class="line">+findJars:12&gt; find /Users/iitii/.m2/repository -name &#x27;*hive-exec*&#x27;</span><br><span class="line">+findJars:10&gt; i=/Users/iitii/.ivy2/cache</span><br><span class="line">+findJars:11&gt; [[ -z &#x27;&#x27; ]]</span><br><span class="line">+findJars:12&gt; find /Users/iitii/.ivy2/cache -name &#x27;*hive-exec*&#x27;</span><br><span class="line">+findJars:10&gt; i=/Users/iitii/Library/Caches/Coursier</span><br><span class="line">+findJars:11&gt; [[ -z &#x27;&#x27; ]]</span><br><span class="line">+findJars:12&gt; find /Users/iitii/Library/Caches/Coursier -name &#x27;*hive-exec*&#x27;</span><br><span class="line">/Users/iitii/Library/Caches/Coursier/v1/https/maven.aliyun.com/nexus/content/groups/public/org/apache/hive/hive-exec</span><br><span class="line">/Users/iitii/Library/Caches/Coursier/v1/https/maven.aliyun.com/nexus/content/groups/public/org/apache/hive/hive-exec/2.3.9/.hive-exec-2.3.9.pom.sha1.checked</span><br><span class="line">/Users/iitii/Library/Caches/Coursier/v1/https/maven.aliyun.com/nexus/content/groups/public/org/apache/hive/hive-exec/2.3.9/hive-exec-2.3.9.jar</span><br><span class="line">+findJars:18&gt; set +x</span><br></pre></td></tr></table></figure><h2 id="删除-hive-相关-jar-包"><a href="#删除-hive-相关-jar-包" class="headerlink" title="删除 hive 相关 jar 包"></a>删除 hive 相关 jar 包</h2><ul><li><code>findJars &quot;*hive-exec*&quot; d</code></li></ul><blockquote><p>最后这个 d 其实填什么都可以, 只要填了, 就会删除. 慎用…</p></blockquote>]]></content>
    
    
    <summary type="html">有的时候 Maven 依赖会抽风, 需要删除重下... 包括并不限于 maven, gradle, sbt</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hadoop手动切换Namenode</title>
    <link href="https://iitii.github.io/2023/04/01/1/"/>
    <id>https://iitii.github.io/2023/04/01/1/</id>
    <published>2023-04-01T14:11:59.000Z</published>
    <updated>2023-09-07T14:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>NN 名称定义于 hdfs-site.xml 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep dfs.ha.namenodes.hdcluster <span class="variable">$&#123;HADOOP&#125;</span>/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><h2 id="查询-NN-节点"><a href="#查询-NN-节点" class="headerlink" title="查询 NN 节点"></a>查询 NN 节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs getconf -namenodes</span><br></pre></td></tr></table></figure><h2 id="查询-NN-状态"><a href="#查询-NN-状态" class="headerlink" title="查询 NN 状态"></a>查询 NN 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -getServiceState namenode1</span><br><span class="line">hdfs haadmin -getServiceState namenode2</span><br></pre></td></tr></table></figure><h2 id="手动切换"><a href="#手动切换" class="headerlink" title="手动切换"></a>手动切换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -failover -forcefence -forceactive namenode2 namenode1</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -transitionToActive namenode2</span><br></pre></td></tr></table></figure><h2 id="HA-集群手动切换"><a href="#HA-集群手动切换" class="headerlink" title="HA 集群手动切换"></a>HA 集群手动切换</h2><blockquote><p>存在脑裂的可能性, 推荐在目前 Active 的 Namenode 上执行</p></blockquote><ul><li>执行前确认 fsimage 以及 edits 文件数量及大小</li><li>执行后同时监听 zkfc 以及 所有 NN 的日志, 确保正常切换</li></ul>]]></content>
    
    
    <summary type="html">有的时候需要强行进行 NN 的主备切换, 以保证数据完整性</summary>
    
    
    
    <category term="hadoop" scheme="https://iitii.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="https://iitii.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>将 powershell 脚本添加为开机启动项</title>
    <link href="https://iitii.github.io/2023/03/14/1/"/>
    <id>https://iitii.github.io/2023/03/14/1/</id>
    <published>2023-03-14T06:46:38.000Z</published>
    <updated>2023-03-14T06:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本质上是将 powershell 脚本添加为 windows 服务, windows 服务即可设置为开机启动并支持其他管理操作.  </p></blockquote><ul><li>一般有两种方式, <span class="exturl" data-url="aHR0cHM6Ly9uc3NtLmNjLw==">nssm<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbnN3L3dpbnN3">WinSW<i class="fa fa-external-link-alt"></i></span></li></ul><blockquote><p>假设 powershell 脚本绝对路径为 <code>C:\1.ps1</code></p></blockquote><blockquote><p>假设服务名称为 <code>PicBack</code></p></blockquote><h2 id="Nssm"><a href="#Nssm" class="headerlink" title="Nssm"></a>Nssm</h2><ol><li>powershell 执行: <code>nssm install PicBack</code></li><li>在弹出的页面填写 <code>Path</code>, <code>StartUp directory</code>, <code>Arguments</code>, <code>Service Name</code><ul><li>Path 部分必须填: <code>powershell</code></li><li>Nssm 安装的服务默认是开机启动</li></ul></li><li>点击 Install Service 即可</li><li>任务管理器 → 服务, 搜索即可看到刚刚安装的服务.</li><li>服务异常日志可在 <code>Windows 事件管理器</code>中查看</li></ol><p><img src="/images/windows/pwsh/nssm.png" alt="nssm"></p><h2 id="WinSW"><a href="#WinSW" class="headerlink" title="WinSW"></a>WinSW</h2><ul><li>编写 .xml 文件, 假设路径为: <code>C:\1.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>PicBack<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>PicBack<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>PicOnline Backend.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>powershell C:\1.ps1<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认延迟启动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delayedAutoStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">delayedAutoStart</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log</span> <span class="attr">mode</span>=<span class="string">&quot;roll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>执行<code>winsw install C:\1.xml</code> 即可安装服务</li><li>任务管理器 → 服务, 搜索即可看到刚刚安装的服务.</li><li>服务异常日志可在 <code>xml 文件目录下查看</code> 或者 <code>启动位置和服务同名的 log 文件中查看</code></li></ol>]]></content>
    
    
    <summary type="html">有时写了一些 ps 脚本想做成开机启动服务怎么办? 没啥头绪</summary>
    
    
    
    <category term="pwsh" scheme="https://iitii.github.io/categories/pwsh/"/>
    
    
    <category term="powerhshell" scheme="https://iitii.github.io/tags/powerhshell/"/>
    
    <category term="windows" scheme="https://iitii.github.io/tags/windows/"/>
    
    <category term="nssm" scheme="https://iitii.github.io/tags/nssm/"/>
    
    <category term="winsw" scheme="https://iitii.github.io/tags/winsw/"/>
    
  </entry>
  
  <entry>
    <title>Scala报错: scala.runtime.NonLocalReturnControl</title>
    <link href="https://iitii.github.io/2023/02/15/1/"/>
    <id>https://iitii.github.io/2023/02/15/1/</id>
    <published>2023-02-15T13:46:33.000Z</published>
    <updated>2023-02-15T13:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>多层嵌套 + return 关键字导致 scalac 无法判断这个 return 关键字的作用域, 随后抛出 <code>scala.runtime.NonLocalReturnControl</code></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>因为这个错和 npe 差不多, 反正都看不到堆栈, 没法直接定位位置.</li><li>想定位的话, 得结合日志和 return 关键字对代码进行仔细观察, 多验证, 总会找到的…</li></ul><h2 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">NonLocalReturnControl</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> r = <span class="type">Math</span>.random() * <span class="number">1000</span></span><br><span class="line">      r <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> r1 <span class="keyword">if</span> r &gt; <span class="number">0.5</span> =&gt;</span><br><span class="line">          asyncHandler &#123; r =&gt;</span><br><span class="line">            <span class="comment">// 正确写法</span></span><br><span class="line">            <span class="comment">// 1</span></span><br><span class="line">            <span class="comment">// 错误写法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// case r2 =&gt; return 433</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">asyncHandler</span></span>(func: <span class="type">Double</span> =&gt; <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      func(<span class="type">Math</span>.random())</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">好好的代码怎么突然报了一个这么奇怪的错? 而且没有堆栈, 没头没脑...</summary>
    
    
    
    <category term="scala" scheme="https://iitii.github.io/categories/scala/"/>
    
    
    <category term="scala" scheme="https://iitii.github.io/tags/scala/"/>
    
    <category term="bug" scheme="https://iitii.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>mvn报错: MVN Malformed &#92;uxxxx encoding.</title>
    <link href="https://iitii.github.io/2023/02/04/1/"/>
    <id>https://iitii.github.io/2023/02/04/1/</id>
    <published>2023-02-04T13:37:52.000Z</published>
    <updated>2023-02-04T13:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>从仓库下载到本地的文件损坏了, 删除重新下载即可</li></ul><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><ol><li>使用 <code>mvn compile -X</code> 找到详细位置</li><li>添加断点, 通过 IDEA DEBUG 模式运行 <code>mvn compile</code></li><li>寻找 <code>TrackingFileManager</code> 栈</li><li>该栈的 file 变量即为有问题的文件</li><li>ls 该文件父目录, 即可看到一个 <code>maven-m\u0000\u0000???</code> 非常奇怪的文件</li><li>连带父目录一起删除, 重新执行即可</li></ol>]]></content>
    
    
    <summary type="html">极少情况可能出现标题的报错, 特别奇怪...</summary>
    
    
    
    <category term="env" scheme="https://iitii.github.io/categories/env/"/>
    
    
    <category term="mvn" scheme="https://iitii.github.io/tags/mvn/"/>
    
    <category term="java" scheme="https://iitii.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java try-with-resouce原理及Scala实现</title>
    <link href="https://iitii.github.io/2023/02/03/1/"/>
    <id>https://iitii.github.io/2023/02/03/1/</id>
    <published>2023-02-03T13:27:05.000Z</published>
    <updated>2023-02-03T13:27:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，所有被打开的系统资源，比如流、文件或者Socket连接等，都需要被开发者手动关闭，否则随着程序的不断运行，资源泄露将会累积成重大的生产事故。</p><p>在JDK7之前，只能通过 <code>try-finally</code> 手动判空并且手动关闭资源。JDK7之后，Java多了个新的语法：<code>try-with-resources</code>语句，对所有实现 <strong><code>java.lang.AutoCloseable</code></strong> 都可以自动关闭。极大的简化了代码。</p><h2 id="术词表"><a href="#术词表" class="headerlink" title="术词表"></a>术词表</h2><table><thead><tr><th>简写</th><th>全拼</th><th>中文释义</th></tr></thead><tbody><tr><td>ARM/arm</td><td>Automatic Resource Management</td><td>自动资源管理</td></tr><tr><td>Java</td><td>Java</td><td>默认代表 Java 8</td></tr><tr><td>Scala</td><td>Scala</td><td>默认代表 Scala 2.13</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>基于 Java8</li><li>多个声明使用分号隔开，代码块终止时，无论是正常还是异常，将按照此顺序自动调用对象的 <code>close</code> 方法。 注意，资源的 <code>close</code> 方法与他们创建相反的顺序调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单资源</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span></span><br><span class="line">                   <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path))) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多资源</span></span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">     java.util.zip.<span class="type">ZipFile</span> <span class="variable">zf</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">java</span>.util.zip.ZipFile(zipFileName);</span><br><span class="line">     java.io.<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span></span><br><span class="line">        java.nio.file.Files.newBufferedWriter(outputFilePath, charset)</span><br><span class="line"> ) &#123;</span><br><span class="line">     <span class="comment">// Enumerate each entry</span></span><br><span class="line">     <span class="keyword">for</span> (java.util.<span class="type">Enumeration</span> <span class="variable">entries</span> <span class="operator">=</span></span><br><span class="line">         zf.entries(); entries.hasMoreElements(); ) &#123;</span><br><span class="line">        <span class="comment">// Get the entry name and write it to the output file</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newLine</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">zipEntryName</span> <span class="operator">=</span></span><br><span class="line">             ((java.util.zip.ZipEntry) entries.nextElement()).getName() +</span><br><span class="line">                     newLine;</span><br><span class="line">            writer.write(zipEntryName, <span class="number">0</span>, zipEntryName.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul><li>需要 <code>Scala 2.13</code>，旧版 Scala 无 <code>scala.util.&#123;Try, Using&#125;</code></li><li>虽然 Scala 和 Java 写法不太一样，但是多个资源关闭的规律相同，即：资源的 <code>close</code> 方法与他们创建相反的顺序调用。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">FileReader</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.util.&#123;<span class="type">Try</span>, <span class="type">Using</span>&#125;</span><br><span class="line"><span class="comment">// 单资源, 如果文件不存在异常会被抑制, 返回的是一个 Try[A] 类型的对象</span></span><br><span class="line"><span class="keyword">val</span> lines: <span class="type">Try</span>[<span class="type">Seq</span>[<span class="type">String</span>]] =</span><br><span class="line">  <span class="type">Using</span>(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file.txt&quot;</span>))) &#123; reader =&gt;</span><br><span class="line">    <span class="type">Iterator</span>.continually(reader.readLine()).takeWhile(_ != <span class="literal">null</span>).toSeq</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单资源，抛出所有异常</span></span><br><span class="line"><span class="keyword">val</span> lines: <span class="type">Seq</span>[<span class="type">String</span>] =</span><br><span class="line">   <span class="type">Using</span>.resource(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file.txt&quot;</span>))) &#123; reader =&gt;</span><br><span class="line">     <span class="type">Iterator</span>.continually(reader.readLine()).takeWhile(_ != <span class="literal">null</span>).toSeq</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 多资源</span></span><br><span class="line"><span class="keyword">val</span> lines: <span class="type">Try</span>[<span class="type">Seq</span>[<span class="type">String</span>]] = <span class="type">Using</span>.<span class="type">Manager</span> &#123; use =&gt;</span><br><span class="line">   <span class="keyword">val</span> r1 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file1.txt&quot;</span>)))</span><br><span class="line">   <span class="keyword">val</span> r2 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file2.txt&quot;</span>)))</span><br><span class="line">   <span class="keyword">val</span> r3 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file3.txt&quot;</span>)))</span><br><span class="line">   <span class="keyword">val</span> r4 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;file4.txt&quot;</span>)))</span><br><span class="line"></span><br><span class="line">   <span class="comment">// use your resources here</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">lines</span></span>(reader: <span class="type">BufferedReader</span>): <span class="type">Iterator</span>[<span class="type">String</span>] =</span><br><span class="line">     <span class="type">Iterator</span>.continually(reader.readLine()).takeWhile(_ != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">   (lines(r1) ++ lines(r2) ++ lines(r3) ++ lines(r4)).toList</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="异常抑制机制"><a href="#异常抑制机制" class="headerlink" title="异常抑制机制"></a>异常抑制机制</h2><h3 id="Scala-1"><a href="#Scala-1" class="headerlink" title="Scala"></a>Scala</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">==Suppression Behavior==</span><br><span class="line"> </span><br><span class="line"> If two exceptions are thrown (e.g., by an operation and closing a resource),</span><br><span class="line"> one of them is re-thrown, and the other is</span><br><span class="line"> [[java.lang.Throwable#addSuppressed added to it as a suppressed exception]].</span><br><span class="line"> If the two exceptions are of different &#x27;severities&#x27; (see below), the one of a higher</span><br><span class="line"> severity is re-thrown, and the one of a lower severity is added to it as a suppressed</span><br><span class="line"> exception. If the two exceptions are of the same severity, the one thrown first is</span><br><span class="line"> re-thrown, and the one thrown second is added to it as a suppressed exception.</span><br><span class="line"> If an exception is a [[scala.util.control.ControlThrowable <span class="code">`ControlThrowable`</span>]], or</span><br><span class="line"> if it does not support suppression (see</span><br><span class="line"> [[java.lang.Throwable <span class="code">`Throwable`</span>&#x27;s constructor with an <span class="code">`enableSuppression`</span> parameter]]),</span><br><span class="line"> an exception that would have been suppressed is instead discarded.</span><br><span class="line"> </span><br><span class="line"> Exceptions are ranked from highest to lowest severity as follows:</span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.VirtualMachineError`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.LinkageError`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.InterruptedException`</span> and <span class="code">`java.lang.ThreadDeath`</span></span><br><span class="line"><span class="bullet">   -</span> [[scala.util.control.NonFatal fatal exceptions]], excluding <span class="code">`scala.util.control.ControlThrowable`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`scala.util.control.ControlThrowable`</span></span><br><span class="line"><span class="bullet">   -</span> all other exceptions</span><br><span class="line"> </span><br><span class="line"> When more than two exceptions are thrown, the first two are combined and</span><br><span class="line"> re-thrown as described above, and each successive exception thrown is combined</span><br><span class="line"> as it is thrown.</span><br></pre></td></tr></table></figure><ul><li>以上是 <code>Using</code> 的 Scala doc, 简单翻译如下</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果有两个异常被抛出，最后只会有一个异常被重新抛出，另外的异常将会通过 java.lang.Throwable#addSuppressed 被作为一个抑制异常添加到重新抛出的异常里面。</span><br><span class="line">如果异常不是属于同一严重性级别，严重性更高的异常将被抛出，严重性较低的作为抑制异常。</span><br><span class="line">如果异常属于同一严重性级别，按先来先抛出来决定抛出哪个异常。如果一个异常不支持被抑制，则将会被忽略（具体看 java.lang.Throwable <span class="code">`Throwable`</span> 构造函数里面的 <span class="code">`enableSuppression`</span> 参数）</span><br><span class="line"></span><br><span class="line">异常严重性，从高到低排列如下：</span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.VirtualMachineError`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.LinkageError`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`java.lang.InterruptedException`</span>、<span class="code">`java.lang.ThreadDeath`</span></span><br><span class="line"><span class="bullet">   -</span> [[scala.util.control.NonFatal fatal exceptions]], 不包括 <span class="code">`scala.util.control.ControlThrowable`</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`scala.util.control.ControlThrowable`</span></span><br><span class="line"><span class="bullet">   -</span> 其他异常</span><br><span class="line">多个异常合并时，按FIFO两两处理，然后抛出最后合并过的异常。</span><br></pre></td></tr></table></figure><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL2xhbmd1YWdlL3RyeS13aXRoLXJlc291cmNlcy5odG1s">https://docs.oracle.com/javase/8/docs/technotes/guides/language/try-with-resources.html<i class="fa fa-external-link-alt"></i></span></li></ul><ol><li>如果 readLine 和 close 同时抛出异常，那么 finally 块里面的异常将会被抛出，其他异常将会被抑制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">However, in this example, if the methods readLine and close both throw exceptions,</span></span><br><span class="line"><span class="comment">then the method readFirstLineFromFileWithFinallyBlock throws the exception thrown</span></span><br><span class="line"><span class="comment">from the finally block; the exception thrown from the try block is suppressed.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">readFirstLineFromFileWithFinallyBlock</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> br.readLine();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (br != <span class="literal">null</span>) br.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果 try 和 try-with-res 块都抛出异常，那么 try 里面的异常将会被抛出，其他异常将会被抑制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In contrast, in the example readFirstLineFromFile, if exceptions are thrown from</span></span><br><span class="line"><span class="comment">both the try block and the try-with-resources statement, then the method</span></span><br><span class="line"><span class="comment">readFirstLineFromFile throws the exception thrown from the try block; the exception</span></span><br><span class="line"><span class="comment">thrown from the try-with-resources block is suppressed. In Java SE 7 and later,</span></span><br><span class="line"><span class="comment">you can retrieve suppressed exceptions; see the section Suppressed Exceptions</span></span><br><span class="line"><span class="comment">for more information.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path))) &#123;</span><br><span class="line">    <span class="keyword">return</span> br.readLine();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// decompile</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    String var3;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var3 = br.readLine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">        var2 = var12;</span><br><span class="line">        <span class="keyword">throw</span> var12;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">                    var2.addSuppressed(var11);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>任何和 try-with-res 关联的代码块都有可能抛出异常。以 <code>writeToFileZipFileContents</code> 为例，try 里面可以抛出一个异常，在关闭 ZipFile 和 BufferedWriter 时最多可以抛出两个异常。如果有多个异常同时抛出，try 代码块里面的为最终抛出的异常，try-with-res 的异常将会被抑制。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An exception can be thrown from the block of code associated with the try-with-resources statement. In the</span></span><br><span class="line"><span class="comment"> * example writeToFileZipFileContents, an exception can be thrown from the try block, and up to two exceptions</span></span><br><span class="line"><span class="comment"> * can be thrown from the try-with-resources statement when it tries to close the ZipFile and BufferedWriter objects.</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * If an exception is thrown from the try block and one or more exceptions are thrown from the try-with-resources</span></span><br><span class="line"><span class="comment"> * statement, then those exceptions thrown from the try-with-resources statement are suppressed, and the exception</span></span><br><span class="line"><span class="comment"> * thrown by the block is the one that is thrown by the writeToFileZipFileContents method. You can retrieve these</span></span><br><span class="line"><span class="comment"> * suppressed exceptions by calling the Throwable.getSuppressed method from the exception thrown by the try block.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToFileZipFileContents</span><span class="params">(String zipFileName, String outputFileName)</span> <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    java.nio.charset.<span class="type">Charset</span> <span class="variable">charset</span> <span class="operator">=</span> java.nio.charset.StandardCharsets.US_ASCII;</span><br><span class="line">    java.nio.file.<span class="type">Path</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> java.nio.file.Paths.get(outputFileName);</span><br><span class="line">    <span class="comment">// Open zip file and create output file with try-with-resources statement</span></span><br><span class="line">    <span class="keyword">try</span> (java.util.zip.<span class="type">ZipFile</span> <span class="variable">zf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.zip.ZipFile(zipFileName); java.io.<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> java.nio.file.Files.newBufferedWriter(outputFilePath, charset)) &#123;</span><br><span class="line">        <span class="comment">// Enumerate each entry</span></span><br><span class="line">        <span class="keyword">for</span> (java.util.<span class="type">Enumeration</span> <span class="variable">entries</span> <span class="operator">=</span> zf.entries(); entries.hasMoreElements(); ) &#123;</span><br><span class="line">            <span class="comment">// Get the entry name and write it to the output file</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newLine</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">zipEntryName</span> <span class="operator">=</span> ((java.util.zip.ZipEntry) entries.nextElement()).getName() + newLine;</span><br><span class="line">            writer.write(zipEntryName, <span class="number">0</span>, zipEntryName.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// decompile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToFileZipFileContents</span><span class="params">(String zipFileName, String outputFileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Charset</span> <span class="variable">charset</span> <span class="operator">=</span> StandardCharsets.US_ASCII;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> Paths.get(outputFileName);</span><br><span class="line">    <span class="type">ZipFile</span> <span class="variable">zf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipFile</span>(zipFileName);</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(outputFilePath, charset);</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Enumeration</span> <span class="variable">entries</span> <span class="operator">=</span> zf.entries();</span><br><span class="line">            <span class="keyword">while</span>(entries.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">newLine</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">zipEntryName</span> <span class="operator">=</span> ((ZipEntry)entries.nextElement()).getName() + newLine;</span><br><span class="line">                writer.write(zipEntryName, <span class="number">0</span>, zipEntryName.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var32) &#123;</span><br><span class="line">            var7 = var32;</span><br><span class="line">            <span class="keyword">throw</span> var32;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var31) &#123;</span><br><span class="line">                        var7.addSuppressed(var31);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var34) &#123;</span><br><span class="line">        var5 = var34;</span><br><span class="line">        <span class="keyword">throw</span> var34;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (zf != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var5 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zf.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var30) &#123;</span><br><span class="line">                    var5.addSuppressed(var30);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                zf.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抑制后的异常会输出什么？"><a href="#抑制后的异常会输出什么？" class="headerlink" title="抑制后的异常会输出什么？"></a>抑制后的异常会输出什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Top Level Exception&quot;</span>);</span><br><span class="line">exception.printStackTrace();</span><br><span class="line">System.out.println(exception);</span><br><span class="line">System.out.println(exception.getMessage());</span><br><span class="line">System.out.println(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">System.err.println(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">exception.addSuppressed(<span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;suppress&quot;</span>));</span><br><span class="line">exception.printStackTrace();</span><br><span class="line">System.out.println(exception);</span><br><span class="line">System.out.println(exception.getMessage());</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们正常使用 printStackTrace() 的时候默认是输出到System.err中去的，而普通的输出都是放入System.out,</span></span><br><span class="line"><span class="comment"> * 这两者都是对上层封装的输出流，在默认情况下两者是指向Console的文本流。所以两者可能会出现同步问题。</span></span><br><span class="line"><span class="comment"> * 可以在printStackTrace()的时候指定输出流为System.out,通过回避System.err来实现Console中文本流的顺序问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exception.printStackTrace(System.out);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">java.lang.Exception: Top Level Exception</span></span><br><span class="line"><span class="comment">at ExceptionT.main(ExceptionT.java:7)</span></span><br><span class="line"><span class="comment">java.lang.Exception: Top Level Exception</span></span><br><span class="line"><span class="comment">at ExceptionT.main(ExceptionT.java:7)</span></span><br><span class="line"><span class="comment">Suppressed: java.lang.Exception: suppress</span></span><br><span class="line"><span class="comment">at ExceptionT.main(ExceptionT.java:12)</span></span><br><span class="line"><span class="comment">java.lang.Exception: Top Level Exception</span></span><br><span class="line"><span class="comment">Top Level Exception</span></span><br><span class="line"><span class="comment">????</span></span><br><span class="line"><span class="comment">java.lang.Exception: Top Level Exception</span></span><br><span class="line"><span class="comment">Top Level Exception</span></span><br><span class="line"><span class="comment">java.lang.Exception: Top Level Exception</span></span><br><span class="line"><span class="comment">at ExceptionT.main(ExceptionT.java:7)</span></span><br><span class="line"><span class="comment">Suppressed: java.lang.Exception: suppress</span></span><br><span class="line"><span class="comment">at ExceptionT.main(ExceptionT.java:12)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Scala-2-11-实现-try-with-res"><a href="#Scala-2-11-实现-try-with-res" class="headerlink" title="Scala 2.11 实现 try-with-res"></a>Scala 2.11 实现 try-with-res</h2><blockquote><p>Scala 2.12 和 2.11 差别不大, 实现上是一样的  </p></blockquote><ul><li>通过前面的了解，我们已经初步熟悉了 try-with-res 的语法和机制，初步实现一下 Scala Using1</li><li>需要注意的点</li><li><input checked="" disabled="" type="checkbox"> 多异常处理</li><li><input checked="" disabled="" type="checkbox"> 单个资源关闭</li><li><input checked="" disabled="" type="checkbox"> 多个资源关闭</li><li><input checked="" disabled="" type="checkbox"> Scalaify ？</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">FileInputStream</span>, <span class="type">FileReader</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.control.<span class="type">NonFatal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对单个资源进行管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">UsingUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Inspire by java try-with-res decode code and Scala 2.13 Using.apply</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">withResourcesNoException</span></span>[<span class="type">T</span> &lt;: <span class="type">AutoCloseable</span>, <span class="type">V</span>](r: =&gt; <span class="type">T</span>)(f: <span class="type">T</span> =&gt; <span class="type">V</span>): <span class="type">V</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      withResources[<span class="type">T</span>,<span class="type">V</span>](r)(f)</span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e:<span class="type">Throwable</span> =&gt;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span>.asInstanceOf[<span class="type">V</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">withResources</span></span>[<span class="type">T</span> &lt;: <span class="type">AutoCloseable</span>, <span class="type">V</span>](r: =&gt; <span class="type">T</span>)(f: <span class="type">T</span> =&gt; <span class="type">V</span>): <span class="type">V</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> resource: <span class="type">T</span> = r</span><br><span class="line">    require(resource != <span class="literal">null</span>, <span class="string">&quot;resource is null&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> exception: <span class="type">Throwable</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      f(resource)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">NonFatal</span>(e) =&gt;</span><br><span class="line">        exception = e</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      closeAndAddSuppressed(exception, resource)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">closeAndAddSuppressed</span></span>(e: <span class="type">Throwable</span>,</span><br><span class="line">                                    resource: <span class="type">AutoCloseable</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        resource.close()</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">NonFatal</span>(suppressed) =&gt;</span><br><span class="line">          e.addSuppressed(suppressed)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resource.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 若文件不存在，会直接报错</span></span><br><span class="line">    <span class="type">UsingUtils</span>.withResources(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/1&quot;</span>))(s =&gt; println(s.ready()))</span><br><span class="line">    <span class="type">UsingUtils</span>.withResourcesNoException(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/2&quot;</span>))(s =&gt; println(s.ready()))</span><br><span class="line">    <span class="type">UsingUtils</span>.withResources(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/2&quot;</span>))(s =&gt; println(s.ready()))</span><br><span class="line">    <span class="type">UsingUtils</span>.withResources(<span class="literal">null</span>: <span class="type">FileInputStream</span>)(s =&gt; println(s.available()))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">FileReader</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.control.&#123;<span class="type">ControlThrowable</span>, <span class="type">NonFatal</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对多个资源进行管理</span></span><br><span class="line"><span class="comment"> * @date 2022/02/09</span></span><br><span class="line"><span class="comment"> * @note [[Using.Manager.apply]] is not same as Scala 2.13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Using</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** A resource manager.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Resources can be registered with the manager by calling [[acquire `acquire`]];</span></span><br><span class="line"><span class="comment">   * such resources will be released in reverse order of their acquisition</span></span><br><span class="line"><span class="comment">   * when the manager is closed, regardless of any exceptions thrown</span></span><br><span class="line"><span class="comment">   * during use.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * $suppressionBehavior</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @note It is recommended for API designers to require an implicit `Manager`</span></span><br><span class="line"><span class="comment">   *       for the creation of custom resources, and to call `acquire` during those</span></span><br><span class="line"><span class="comment">   *       resources&#x27; construction. Doing so guarantees that the resource &#x27;&#x27;must&#x27;&#x27; be</span></span><br><span class="line"><span class="comment">   *       automatically managed, and makes it impossible to forget to do so.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *       Example:</span></span><br><span class="line"><span class="comment">   * &#123;&#123;&#123;</span></span><br><span class="line"><span class="comment">   *       class SafeFileReader(file: File)(implicit manager: Using.Manager)</span></span><br><span class="line"><span class="comment">   *         extends BufferedReader(new FileReader(file)) &#123;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *         def this(fileName: String)(implicit manager: Using.Manager) = this(new File(fileName))</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *         manager.acquire(this)</span></span><br><span class="line"><span class="comment">   *       &#125;</span></span><br><span class="line"><span class="comment">   * &#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="title">private</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> <span class="type">Manager</span>._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> closed = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> resources: <span class="type">List</span>[<span class="type">Resource</span>[_]] = <span class="type">Nil</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Registers the specified resource with this manager, so that</span></span><br><span class="line"><span class="comment">     * the resource is released when the manager is closed, and then</span></span><br><span class="line"><span class="comment">     * returns the (unmodified) resource.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">R</span>: <span class="type">Releasable</span>](resource: <span class="type">R</span>): <span class="type">R</span> = &#123;</span><br><span class="line">      acquire(resource)</span><br><span class="line">      resource</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Registers the specified resource with this manager, so that</span></span><br><span class="line"><span class="comment">     * the resource is released when the manager is closed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">acquire</span></span>[<span class="type">R</span>: <span class="type">Releasable</span>](resource: <span class="type">R</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (resource == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span>(<span class="string">&quot;null resource&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> (closed) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">&quot;Manager has already been closed&quot;</span>)</span><br><span class="line">      resources = <span class="keyword">new</span> <span class="type">Resource</span>(resource) :: resources</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">manage</span></span>[<span class="type">A</span>](op: <span class="type">Manager</span> =&gt; <span class="type">A</span>): <span class="type">A</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> toThrow: <span class="type">Throwable</span> = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        op(<span class="keyword">this</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> t: <span class="type">Throwable</span> =&gt;</span><br><span class="line">          toThrow = t</span><br><span class="line">          <span class="literal">null</span>.asInstanceOf[<span class="type">A</span>] <span class="comment">// compiler doesn&#x27;t know `finally` will throw</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        closed = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">var</span> rs: <span class="type">List</span>[<span class="type">Resource</span>[_]] = resources</span><br><span class="line">        resources = <span class="literal">null</span> <span class="comment">// allow GC, in case something is holding a reference to `this`</span></span><br><span class="line">        <span class="keyword">while</span> (rs.nonEmpty) &#123;</span><br><span class="line">          <span class="keyword">val</span> resource: <span class="type">Resource</span>[_] = rs.head</span><br><span class="line">          rs = rs.tail</span><br><span class="line">          <span class="keyword">try</span> resource.release()</span><br><span class="line">          <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> t: <span class="type">Throwable</span> =&gt;</span><br><span class="line">              <span class="keyword">if</span> (toThrow == <span class="literal">null</span>) toThrow = t</span><br><span class="line">              <span class="keyword">else</span> toThrow = preferentiallySuppress(toThrow, t)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (toThrow != <span class="literal">null</span>) <span class="keyword">throw</span> toThrow</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Performs an operation using a `Manager`, then closes the `Manager`,</span></span><br><span class="line"><span class="comment">     * releasing its resources (in reverse order of acquisition).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Example:</span></span><br><span class="line"><span class="comment">     * &#123;&#123;&#123;</span></span><br><span class="line"><span class="comment">     * val lines = Using.Manager &#123; use =&gt;</span></span><br><span class="line"><span class="comment">     *   use(new BufferedReader(new FileReader(&quot;file.txt&quot;))).lines()</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If using resources which require an implicit `Manager` as a parameter,</span></span><br><span class="line"><span class="comment">     * this method should be invoked with an `implicit` modifier before the function</span></span><br><span class="line"><span class="comment">     * parameter:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Example:</span></span><br><span class="line"><span class="comment">     * &#123;&#123;&#123;</span></span><br><span class="line"><span class="comment">     * val lines = Using.Manager &#123; implicit use =&gt;</span></span><br><span class="line"><span class="comment">     *   new SafeFileReader(&quot;file.txt&quot;).lines()</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See the main doc for [[Using `Using`]] for full details of suppression behavior.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param op the operation to perform using the manager</span></span><br><span class="line"><span class="comment">     * @tparam A the return type of the operation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return a [[Try]] containing an exception if one or more were thrown,</span></span><br><span class="line"><span class="comment">     *         or the result of the operation if no exceptions were thrown</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">A</span>](op: <span class="type">Manager</span> =&gt; <span class="type">A</span>): <span class="type">A</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">      (<span class="keyword">new</span> <span class="type">Manager</span>).manage(op)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span>.asInstanceOf[<span class="type">A</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span>[<span class="type">R</span>](<span class="params">resource: <span class="type">R</span></span>)(<span class="params">implicit releasable: <span class="type">Releasable</span>[<span class="type">R</span>]</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">release</span></span>(): <span class="type">Unit</span> = releasable.release(resource)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">preferentiallySuppress</span></span>(primary: <span class="type">Throwable</span>, secondary: <span class="type">Throwable</span>): <span class="type">Throwable</span> = &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">score</span></span>(t: <span class="type">Throwable</span>): <span class="type">Int</span> = t <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">VirtualMachineError</span> =&gt; <span class="number">4</span></span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">LinkageError</span> =&gt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">InterruptedException</span> | _: <span class="type">ThreadDeath</span> =&gt; <span class="number">2</span></span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">ControlThrowable</span> =&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> e <span class="keyword">if</span> !<span class="type">NonFatal</span>(e) =&gt; <span class="number">1</span> <span class="comment">// in case this method gets out of sync with NonFatal</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@inline</span> <span class="function"><span class="keyword">def</span> <span class="title">suppress</span></span>(t: <span class="type">Throwable</span>, suppressed: <span class="type">Throwable</span>): <span class="type">Throwable</span> = &#123;</span><br><span class="line">        t.addSuppressed(suppressed);</span><br><span class="line">        t</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (score(secondary) &gt; score(primary)) suppress(secondary, primary)</span><br><span class="line">      <span class="keyword">else</span> suppress(primary, secondary)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** A type class describing how to release a particular type of resource.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * A resource is anything which needs to be released, closed, or otherwise cleaned up</span></span><br><span class="line"><span class="comment">   * in some way after it is finished being used, and for which waiting for the object&#x27;s</span></span><br><span class="line"><span class="comment">   * garbage collection to be cleaned up would be unacceptable. For example, an instance of</span></span><br><span class="line"><span class="comment">   * [[java.io.OutputStream]] would be considered a resource, because it is important to close</span></span><br><span class="line"><span class="comment">   * the stream after it is finished being used.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * An instance of `Releasable` is needed in order to automatically manage a resource</span></span><br><span class="line"><span class="comment">   * with [[Using `Using`]]. An implicit instance is provided for all types extending</span></span><br><span class="line"><span class="comment">   * [[java.lang.AutoCloseable]].</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @tparam R the type of the resource</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">trait</span> <span class="title">Releasable</span>[-<span class="type">R</span>] </span>&#123;</span><br><span class="line">    <span class="comment">/** Releases the specified resource. */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">release</span></span>(resource: <span class="type">R</span>): <span class="type">Unit</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">Releasable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** An implicit `Releasable` for [[java.lang.AutoCloseable `AutoCloseable`s]]. */</span></span><br><span class="line">    <span class="keyword">implicit</span> <span class="class"><span class="keyword">object</span> <span class="title">AutoCloseableIsReleasable</span> <span class="keyword">extends</span> <span class="title">Releasable</span>[<span class="type">AutoCloseable</span>] </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">release</span></span>(resource: <span class="type">AutoCloseable</span>): <span class="type">Unit</span> = resource.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> lines: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">Using</span>.<span class="type">Manager</span>.apply &#123; use =&gt;</span><br><span class="line">      <span class="keyword">val</span> r1 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/file1.txt&quot;</span>)))</span><br><span class="line">      <span class="keyword">val</span> r2 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/file2.txt&quot;</span>)))</span><br><span class="line">      <span class="keyword">val</span> r3 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/file3.txt&quot;</span>)))</span><br><span class="line">      <span class="keyword">val</span> r4 = use(<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;/tmp/file4.txt&quot;</span>)))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use your resources here</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">lines</span></span>(reader: <span class="type">BufferedReader</span>): <span class="type">Iterator</span>[<span class="type">String</span>] =</span><br><span class="line">        <span class="type">Iterator</span>.continually(reader.readLine()).takeWhile(_ != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">      (lines(r1) ++ lines(r2) ++ lines(r3) ++ lines(r4)).toList</span><br><span class="line">    &#125;</span><br><span class="line">    println(lines)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开源实现"><a href="#开源实现" class="headerlink" title="开源实现"></a>开源实现</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMv">https://github.com/pathikrit/better-files/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzdWVyZXRoL3NjYWxhLWFybS8=">https://github.com/jsuereth/scala-arm/<i class="fa fa-external-link-alt"></i></span></li></ul><table><thead><tr><th>名称</th><th><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzdWVyZXRoL3NjYWxhLWFybQ==">https://github.com/jsuereth/scala-arm<i class="fa fa-external-link-alt"></i></span></th><th><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXM=">https://github.com/pathikrit/better-files<i class="fa fa-external-link-alt"></i></span></th></tr></thead><tbody><tr><td>链接</td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzdWVyZXRoL3NjYWxhLWFybS8=">https://github.com/jsuereth/scala-arm/<i class="fa fa-external-link-alt"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXM=">https://github.com/pathikrit/better-files<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>数据采集时间</td><td>2022.2.10</td><td>2022.2.10</td></tr><tr><td>Star</td><td>553</td><td>1400+</td></tr><tr><td>Commits</td><td>194</td><td>978</td></tr><tr><td>Last Commit</td><td>2020.10.26</td><td>2021.4.24</td></tr><tr><td>Total Issues</td><td>41</td><td>197</td></tr><tr><td>Total PR</td><td>76</td><td>348</td></tr><tr><td>Supports</td><td>ARM</td><td>ARM, I/O, Resource APIs, Streams, File Monitoring…</td></tr></tbody></table><h3 id="scala-arm"><a href="#scala-arm" class="headerlink" title="scala-arm"></a>scala-arm</h3><ul><li>Only a simple example</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resource._</span><br><span class="line"><span class="comment">// Copy input into output.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  input &lt;- managed(<span class="keyword">new</span> java.io.<span class="type">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>))</span><br><span class="line">  output &lt;- managed(<span class="keyword">new</span> java.io.<span class="type">FileOutputStream</span>(<span class="string">&quot;test2.txt&quot;</span>))</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](<span class="number">512</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read</span></span>(): <span class="type">Unit</span> = input.read(buffer) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span> =&gt; ()</span><br><span class="line">    <span class="keyword">case</span>  n =&gt;</span><br><span class="line">      output.write(buffer,<span class="number">0</span>,n)</span><br><span class="line">      read()</span><br><span class="line">  &#125;</span><br><span class="line">  read()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Better-Files"><a href="#Better-Files" class="headerlink" title="Better Files"></a>Better Files</h3><ol><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZmlsZS1yZWFkd3JpdGU=">Simple I/O<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjcmVzb3VyY2UtYXBpcw==">Resource APIs<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjc3RyZWFtcw==">Streams<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZW5jb2Rpbmdz">Encodings<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjamF2YS1zZXJpYWxpemF0aW9uLXV0aWxz">Java serialization utils<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjamF2YS1pbnRlcm9wZXJhYmlsaXR5">Java compatibility<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZ2xvYmJpbmc=">Globbing<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZmlsZS1zeXN0ZW0tb3BlcmF0aW9ucw==">File system operations<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjY2hlY2tzdW1z">Checksums<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjdGVtcG9yYXJ5LWZpbGVz">Temporary files<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjdW5peC1kc2w=">UNIX DSL<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZmlsZS1hdHRyaWJ1dGVz">File attributes<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZmlsZS1jb21wYXJpc29u">File comparison<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjemlwLWFwaXM=">Zip/GZip<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjbGlnaHR3ZWlnaHQtYXJt">Automatic Resource Management<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjc2Nhbm5lcg==">Scanner<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjZmlsZS1tb25pdG9yaW5n">File Monitoring<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdGhpa3JpdC9iZXR0ZXItZmlsZXMjYWtrYS1maWxlLXdhdGNoZXI=">Reactive File Watcher<i class="fa fa-external-link-alt"></i></span></li></ol><h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>既然你都看到这里了, 那我留个问题吧:</p><ul><li>比如带 AutoClose 的文件资源，我可以仅调用但不进行 close 操作吗？它会自动关闭吗？</li></ul><!-- 答：不行。如果不使用 ARM，资源并不会自动关闭。说到底 `try-with-resources`语句仅仅也只是一个语法糖而已，结合编译后的代码我们可以很容易理清楚其间的逻辑。它只是将 close 这一块的代码自动处理了，但是资源还是关闭了，所以继承 `AutoClose` 的资源并不是使用完就可以不管了，还是得手动处理或者使用 ARM -->]]></content>
    
    
    <summary type="html">Scala 直到 2.13.x 才提供了 try-with-res 之类的资源管理操作, 那么它究竟是怎么一回事呢? 能否在 Scala 2.11, Scala 2.12 上自己实现吗? 对此我们应该首先深入了解下 Java7 开始提供的 try-with-resouce 语法糖</summary>
    
    
    
    <category term="java" scheme="https://iitii.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://iitii.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 运行来自身份不明开发者的应用</title>
    <link href="https://iitii.github.io/2023/02/02/1/"/>
    <id>https://iitii.github.io/2023/02/02/1/</id>
    <published>2023-02-02T13:21:45.000Z</published>
    <updated>2023-02-02T13:21:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>实现这个目标大概有两种方法, 分为禁用和不禁用 SIP. 从安全性讲不禁用 SIP 好点.</li></ul><blockquote><p>System Integrity Protection (SIP)是Mac系统的一种安全功能，它限制了root用户账户的权限，防止恶意软件修改或覆盖系统文件或应用。SIP在OS X El Capitan或更高版本中默认开启。如果要关闭或开启SIP，需要进入恢复模式并使用终端命令**<code>csrutil disable</code><strong>或</strong><code>csrutil enable</code>**。但是关闭SIP可能会导致系统不稳定或受到攻击，所以一般不建议普通用户这样做。</p></blockquote><h2 id="禁用系统完整性保护-SIP"><a href="#禁用系统完整性保护-SIP" class="headerlink" title="禁用系统完整性保护(SIP)"></a>禁用系统完整性保护(SIP)</h2><ul><li>禁用之后可以运行来着任意来源的应用, 包括 <code>来自身份不明开发者的应用</code></li></ul><h3 id="第一种-直接在主系统执行"><a href="#第一种-直接在主系统执行" class="headerlink" title="第一种: 直接在主系统执行"></a>第一种: 直接在主系统执行</h3><ul><li><code>sudo spctl --master-disable</code></li><li>重启电脑, 即可在 设置→安全性隐私→启用任意来源</li></ul><h3 id="第二种-在-RecoveryOS-执行"><a href="#第二种-在-RecoveryOS-执行" class="headerlink" title="第二种: 在 RecoveryOS 执行"></a>第二种: 在 RecoveryOS 执行</h3><ul><li>重启, 按住 <code>⌘+R</code> 进入 RecoveryOS</li><li>打开终端执行: <code>csrutil disable</code></li><li>重启电脑, 即可在 设置→安全性隐私→启用任意来源</li></ul><h2 id="不禁用-SIP-手动解除-quarantine-限制"><a href="#不禁用-SIP-手动解除-quarantine-限制" class="headerlink" title="不禁用 SIP, 手动解除 quarantine 限制"></a>不禁用 SIP, 手动解除 quarantine 限制</h2><blockquote><p>macOS quarantine是一种安全机制，用于防止从互联网下载的应用程序或文件包含恶意软件或病毒。当你尝试打开一个被quarantine的应用程序时，macOS会检查它是否有已知的恶意软件，并且开发者的签名证书是否有效1。如果没有问题，你可以继续打开应用程序。如果有问题，macOS会警告你并建议你删除应用程序。</p></blockquote><ol><li>打开终端应用程序。</li><li>输入或粘贴以下命令：<code>sudo xattr -r -d com.apple.quarantine</code></li><li>在命令后面加上一个空格。</li><li>把下载的应用程序或文件拖到终端窗口中, 如: <code>sudo xattr -r -d com.apple.quarantine /Applications/Sensci.app</code></li><li>按回车键执行命令。</li><li>输入你的登录密码（输入时不会显示任何字符）并按回车键确认。</li></ol><p>这样就可以移除quarantine属性了。请注意，这样做可能会降低你的系统安全性，所以请确保你下载的来源是可信赖的，并且在移除quarantine属性之前扫描一下是否有恶意软件或病毒。</p>]]></content>
    
    
    <summary type="html">有时从网上下载的软件无法直接运行, 怎么处理? 来说道说道</summary>
    
    
    
    <category term="macos" scheme="https://iitii.github.io/categories/macos/"/>
    
    <category term="hack" scheme="https://iitii.github.io/categories/macos/hack/"/>
    
    
    <category term="macos" scheme="https://iitii.github.io/tags/macos/"/>
    
    <category term="hack" scheme="https://iitii.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>VisualGC 提示 “Not Supported for this JVM”</title>
    <link href="https://iitii.github.io/2023/02/01/1/"/>
    <id>https://iitii.github.io/2023/02/01/1/</id>
    <published>2023-02-01T13:09:09.000Z</published>
    <updated>2023-02-02T13:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>远程服务上面编辑 <code>vim /tmp/tools.policy</code>并添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant codebase <span class="string">&quot;file:<span class="variable">$&#123;java.home&#125;</span>/../lib/tools.jar&quot;</span> &#123;</span><br><span class="line">   permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>启动 <code>jstatsd</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstatd -J-Djava.rmi.server.hostname=<span class="string">&quot;实际监听地址&quot;</span> -J-Djava.security.policy=/tmp/tools.policy</span><br></pre></td></tr></table></figure><ul><li>打开 <code>visualvm</code> 添加 <code>jstatsd</code> 链接即可</li></ul><p><img src="/images/jvm/visualvm/1.png" style="    width: 60%;    min-width: 420px;    max-width: 800px;"></p>]]></content>
    
    
    <summary type="html">在不支持 VisualGC 的机器上面启用 VisualGC</summary>
    
    
    
    <category term="jvm" scheme="https://iitii.github.io/categories/jvm/"/>
    
    
    <category term="jvm" scheme="https://iitii.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Telegarf 通过代理访问 TG API 的几种方式</title>
    <link href="https://iitii.github.io/2022/12/31/1/"/>
    <id>https://iitii.github.io/2022/12/31/1/</id>
    <published>2022-12-31T06:45:24.000Z</published>
    <updated>2022-12-31T06:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>主要分为客户端代理和服务端代理, 一般情况下只需一个就可以了</li></ul><h2 id="客户端代理"><a href="#客户端代理" class="headerlink" title="客户端代理"></a>客户端代理</h2><h3 id="clash-增强模式-clash-tun-模式"><a href="#clash-增强模式-clash-tun-模式" class="headerlink" title="clash 增强模式 / clash tun 模式"></a>clash 增强模式 / clash tun 模式</h3><ul><li>这种情况下 clash 已经接管了所有流量, 直接启动就可以了, 不需要额外设置<h3 id="http-agent"><a href="#http-agent" class="headerlink" title="http agent"></a>http agent</h3></li><li>需要有一个可以访问的 http 代理, 比如 clash 默认启动的本地 http 代理</li></ul><blockquote><p>如果是手动写的 v2 配置文件, 可以参考 <a href="https://iitii.github.io/2020/02/04/1/">在 v2ray 中同时开启 socks 和 http 代理</a> 来手动开启 http 代理服务  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Telegraf = require(&#x27;telegraf&#x27;)</span><br><span class="line">const HttpsProxyAgent = require(&#x27;https-proxy-agent&#x27;)</span><br><span class="line"></span><br><span class="line">const bot = new Telegraf(&#x27;bot_token&#x27;, &#123;</span><br><span class="line">  telegram: &#123;</span><br><span class="line">    agent: new HttpsProxyAgent(&#x27;proxy url&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="socks-agent"><a href="#socks-agent" class="headerlink" title="socks agent"></a>socks agent</h3><ul><li>同上, 只不过 agent 变成了 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc29ja3MtcHJveHktYWdlbnQ=">SocksAgent<i class="fa fa-external-link-alt"></i></span></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Telegraf = require(&#x27;telegraf&#x27;);</span><br><span class="line">const SocksAgent = require(&#x27;socks5-https-client/lib/Agent&#x27;);</span><br><span class="line">const socksAgent = new SocksAgent(&#123;</span><br><span class="line">  socksHost: config.proxy.host,</span><br><span class="line">  socksPort: config.proxy.port,</span><br><span class="line">  socksUsername: config.proxy.login,</span><br><span class="line">  socksPassword: config.proxy.psswd,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const app = new Telegraf(token, &#123;</span><br><span class="line">  telegram: &#123; agent: socksAgent &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="服务端代理"><a href="#服务端代理" class="headerlink" title="服务端代理"></a>服务端代理</h2><ul><li>代理地址参见: <a href="https://iitii.github.io/2022/12/30/1/">反代Telegram Bot API</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const app = new Telegraf(token, &#123;</span><br><span class="line">  telegram: &#123;</span><br><span class="line">    // proxy for https://api.telegram.org</span><br><span class="line">    apiRoot: &#x27;https://tg-api-proxy-on-my-domain&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlbGVncmFmL3RlbGVncmFmL2lzc3Vlcy82Mw==">https://github.com/telegraf/telegraf/issues/63<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">网络有的时候问题比较多, 可能需要代理才能正常工作, 这里记录一下代理访问 TG 的几种方式</summary>
    
    
    
    <category term="tg" scheme="https://iitii.github.io/categories/tg/"/>
    
    
    <category term="tg" scheme="https://iitii.github.io/tags/tg/"/>
    
    <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>反代Telegram Bot API</title>
    <link href="https://iitii.github.io/2022/12/30/1/"/>
    <id>https://iitii.github.io/2022/12/30/1/</id>
    <published>2022-12-30T06:28:11.000Z</published>
    <updated>2022-12-30T06:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必备条件"><a href="#必备条件" class="headerlink" title="必备条件"></a>必备条件</h2><ul><li>一台能正常访问 TG API 的机器</li><li>NGINX</li><li>https</li></ul><blockquote><p>因为请求 TG API 走的是 HTTPS, 所以这里必须要 HTTPS 反代  </p></blockquote><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><ul><li>可以自由的把这段 location 添加到已有的 nginx ssl 配置中, 用于实现反代<blockquote><p>不熟悉的 NGINX 的, 加错了自己修  </p></blockquote></li><li>配置检查, 重载: <code>nginx -t &amp;&amp; nginx -s reload</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* ^/bot</span> &#123;</span><br><span class="line">     <span class="comment">## dns必须写，不然会报502错误</span></span><br><span class="line">     <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line">     <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span>  https://api.telegram.org<span class="variable">$request_uri</span>;</span><br><span class="line">     <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">     <span class="comment"># 不能设置 proxy header 否则无返回</span></span><br><span class="line">     <span class="comment"># proxy_set_header Host $host;</span></span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li>如果 502 先看看 有没有设置 dns, 检查 dns 可用性</li><li>然后再看看 nginx 日志, 根据配置文件排查看看是哪里不对劲</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ curl https://api.telegram.org/bot</span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;error_code&quot;</span>:404,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;Not Found&quot;</span>&#125;<span class="comment">#                       </span></span><br><span class="line">❯ curl https://tyn3.xxx.xxx/bot</span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;error_code&quot;</span>:404,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;Not Found&quot;</span>&#125;<span class="comment">#       </span></span><br></pre></td></tr></table></figure><h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">upstream iitii &#123;</span><br><span class="line">    server openwrt.iitii.me:443;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;  </span><br><span class="line">    rewrite ^(.*) https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name china.iitii.me;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/china.iitii.me/pem.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/china.iitii.me/key.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    location ~* ^/bot &#123;</span><br><span class="line">     <span class="comment">## dns必须写，不然会报502错误</span></span><br><span class="line">     resolver 8.8.8.8;</span><br><span class="line">     proxy_buffering off;</span><br><span class="line">     proxy_pass  https://api.telegram.org<span class="variable">$request_uri</span>;</span><br><span class="line">     proxy_http_version 1.1;</span><br><span class="line">     <span class="comment"># 不能设置 proxy header 否则无返回</span></span><br><span class="line">     <span class="comment"># proxy_set_header Host $host;</span></span><br><span class="line">     proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">     proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://iitii;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">        proxy_set_header Accept-Encoding <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        proxy_buffering off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h3><ul><li><a href="https://iitii.github.io/2019/04/06/1/">WebServer 基本配置文件</a></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhbnBpbGkuY29tLzIwMjIvY2xvdWQvcmV2ZXJzZS1wcm94eS1mb3ItdGctYm90Lw==">https://blog.panpili.com/2022/cloud/reverse-proxy-for-tg-bot/<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">国内环境无法正常访问, 机器上面加代理太麻烦, 那不如直接反代下 API 吧</summary>
    
    
    
    <category term="proxy" scheme="https://iitii.github.io/categories/proxy/"/>
    
    
    <category term="tg" scheme="https://iitii.github.io/tags/tg/"/>
    
    <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
    <category term="nginx" scheme="https://iitii.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 局域网广播主机名</title>
    <link href="https://iitii.github.io/2022/12/25/1/"/>
    <id>https://iitii.github.io/2022/12/25/1/</id>
    <published>2022-12-25T06:46:08.000Z</published>
    <updated>2022-12-25T06:46:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>比如下面的样子, 只显示匿名主机, 不像 windows 一样显示主机名</li></ul><p><img src="/images/Linux/mdns/1.png" alt="alt"></p><h2 id="修复步骤"><a href="#修复步骤" class="headerlink" title="修复步骤"></a>修复步骤</h2><blockquote><p>因为 smaba 使用的是 netbios 进行发现, 所以就往这方向弄了  </p></blockquote><ol><li>修改 hostname 为 .local, 比如 dev.local. <code>hostnamectl set-hostname dev.local</code></li><li>修改需广播的主机 hosts 文件, 添加: <code>127.0.0.1 dev.local</code> 之类的映射</li><li>安装 netbios 软件: <code>apt install nbtscan</code></li><li>扫描内网: <code>nbtscan 192.168.0.1/16</code></li><li>路由器更新这个列表可能比较慢, 可以过段时间再回来检查</li></ol><blockquote><p>扫描的时候可能会造成网络波动,  需注意…  </p></blockquote><p><img src="/images/Linux/mdns/2.png" alt="alt"></p><blockquote><p>看到其他的也有说用 mdns 的方式, 安装 avahi 进行多播, 未验证, 详见 <a href="#ref">Ref</a>  </p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ub3Rlcy5sZWNvbmlvdC5jb20vbWRucy5odG1s">https://notes.leconiot.com/mdns.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vdC83OTE3MTE=">https://www.v2ex.com/t/791711<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">有时路由器里面不显示 linux 主机名, 这时候就需要额外处理了</summary>
    
    
    
    <category term="network" scheme="https://iitii.github.io/categories/network/"/>
    
    
    <category term="netbios" scheme="https://iitii.github.io/tags/netbios/"/>
    
    <category term="mdns" scheme="https://iitii.github.io/tags/mdns/"/>
    
  </entry>
  
  <entry>
    <title>OpenCore 引导完美升级</title>
    <link href="https://iitii.github.io/2022/11/17/1/"/>
    <id>https://iitii.github.io/2022/11/17/1/</id>
    <published>2022-11-17T05:54:35.000Z</published>
    <updated>2022-11-18T05:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/macos/bmac/oc/oc.png" alt="oc"></p><ol><li>备份原有 OC (做好回滚的准备</li><li>下载新版 OpenCore <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FjaWRhbnRoZXJhL09wZW5Db3JlUGtnL3JlbGVhc2Vz">https://github.com/acidanthera/OpenCorePkg/releases<i class="fa fa-external-link-alt"></i></span></li><li>将 1, 3, 4 里面的文件使用新版进行替换<ol><li>4 里面的文件严格来说并不需要, 只是留着方便使用</li><li>不追求完美到这就可以收工了</li></ol></li><li>将 OC 复制到 U 盘 EFI<ol><li>U 盘格式化可以使用: <code>diskutil list &amp;&amp; diskutil eraseDisk HFS+ usbefi /dev/$&#123;identifier&#125;</code></li><li>U 盘 EFI 挂载可以使用 OOC &gt; 工具 &gt; 挂载 EFI</li></ol></li></ol><p><img src="/images/macos/bmac/oc/ooc_efi.png" alt="oc"></p><ol start="5"><li>扫描配置文件, 使用 OOC 打开 U 盘 EFI 里面的配置文件</li><li>升级 ACPI, Drivers, Tools<ol><li><code>ACPI 设置</code>, 下载/更新, 选中需要更新的文件, 右侧选择 U 盘 EFI 分区, 点击下载</li><li><code>Misc &gt; Boot &gt; Tools-添加附加工具</code>, 下载/更新, 选中需要更新的文件, 右侧选择 U 盘 EFI 分区, 点击下载</li><li><code>UEFI &gt; UEFI 驱动</code>, 下载/更新, 选中需要更新的文件, 右侧选择 U 盘 EFI 分区, 点击下载</li><li>hfsplus.efi 找不到的话, 可以从之前的 OC 里面拷贝过来</li></ol></li></ol><p><img src="/images/macos/bmac/oc/ooc.png" alt="oc"></p><ol><li>遍历所有配置, 将 <code>未启用, 样例残留</code> 的配置进行删除(可选备份</li><li>对 kexts 进行升级(可选<ol><li><code>Kernel 设置</code>, 下载更新, 选中需要更新的文件, 左上角选择 U 盘 EFI 分区, 点击下载</li><li>可以使用 4 里面的 <code>acdtinfo</code> 来查看当前<code>部分安装的 kexts 的版本</code></li><li>如果 Kexts 文件夹或者其他地方, 有详细的 kexts 版本以及下载地址, 可以直接手动下载, 并替换</li><li>对于一些经过定义后的 kexts, 如: USBMap.kext, 触摸板相关. 保留原有的就可以了, 否则需要重新进行定制</li></ol></li><li>校验配置文件, <code>OOC &gt; 工具 &gt; Config 配置健全性检查</code>, 选择对应版本, 按输出信息对配置进行微调</li><li>开启日志输出到文件, <code>Misc &gt; Debug &gt; Target &gt; 启用记录到文件</code>, 验证后可以去掉勾选<ol><li>日志文件会输出到启动 OC 所在 EFI 分区根目录下</li><li>如果加载了<code>CrScreenshotDxe.efi</code> 驱动的话, 按 <code>**F10**</code> 会截屏保存到 EFI 分区根目录下</li></ol></li><li>重启加载新 OC, 一切正常即升级成功</li></ol><p><img src="/images/macos/bmac/oc/kexts.png" alt="oc"></p><h3 id="从-OC-Debug-版本切换到-Release"><a href="#从-OC-Debug-版本切换到-Release" class="headerlink" title="从 OC Debug 版本切换到 Release"></a>从 OC Debug 版本切换到 Release</h3><ul><li>下载对应版本的 Debug/Release  OC 文件</li><li>替换 1, 3 即可</li></ul><p><img src="/images/macos/bmac/oc/oc.png" alt="oc"></p>]]></content>
    
    
    <summary type="html">OpenCore 0.8.3 -&gt; 0.8.6 版本完美升级记录</summary>
    
    
    
    <category term="hack" scheme="https://iitii.github.io/categories/hack/"/>
    
    
    <category term="OpenCore" scheme="https://iitii.github.io/tags/OpenCore/"/>
    
    <category term="OC" scheme="https://iitii.github.io/tags/OC/"/>
    
    <category term="0.8.6" scheme="https://iitii.github.io/tags/0-8-6/"/>
    
    <category term="升级" scheme="https://iitii.github.io/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>TG 获取Channel ID</title>
    <link href="https://iitii.github.io/2022/09/28/1/"/>
    <id>https://iitii.github.io/2022/09/28/1/</id>
    <published>2022-09-28T08:12:26.000Z</published>
    <updated>2022-09-28T08:12:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直接使用-Channel-name"><a href="#直接使用-Channel-name" class="headerlink" title="直接使用 Channel name"></a>直接使用 Channel name</h2><blockquote><p>仅限于 public channel</p></blockquote><ol><li>假设该 public channel的邀请链接为: <code>t.me/public_chh</code></li><li><code>@public_chh</code>即为该 public channel 的 name</li><li>调用 sendMessage 之类的方法时, 将 <code>@public_chh</code> 作为 chat_id/uid 传入即可</li></ol><h2 id="从-TG-Web-URL-获取"><a href="#从-TG-Web-URL-获取" class="headerlink" title="从 TG Web URL 获取"></a>从 TG Web URL 获取</h2><ol><li>登陆 <span class="exturl" data-url="aHR0cHM6Ly93ZWIudGVsZWdyYW0ub3JnLw==">https://web.telegram.org<i class="fa fa-external-link-alt"></i></span></li><li>打开对应的 Channel, 如 <span class="exturl" data-url="aHR0cHM6Ly93ZWIudGVsZWdyYW0ub3JnLyMvaW0/cD1jMTA1NTU4NzExNl8xMTA1MjIyNDQwMjU0MTkxMDI1Nw==">https://web.telegram.org/#/im?p=c1055587116_11052224402541910257<i class="fa fa-external-link-alt"></i></span></li><li>其中 p 对应的值包含了 Channel ID, 加上 <code>-100</code>就是 Channel ID</li><li><code>c1055587116_11052224402541910257</code> ⇒ <code>1055587116</code> ⇒ <code>-1001055587116</code></li><li><code>-1001055587116</code> 即为该频道对应的 Channel ID</li></ol><h2 id="使用现成机器人获取"><a href="#使用现成机器人获取" class="headerlink" title="使用现成机器人获取"></a>使用现成机器人获取</h2><blockquote><p>可能会夹带私货, 需谨慎</p></blockquote><ol><li>邀请如 @get_id_bot 机器人进入对应群组, 自动发送 Channel ID</li><li>移除机器人</li><li>如果没有自动发送, 手动发送 <code>/my_id@get_id_bot</code> 获取ID</li></ol><h2 id="调用-TG-API"><a href="#调用-TG-API" class="headerlink" title="调用 TG API"></a>调用 TG API</h2><ol><li>新建机器人, 获取 token</li><li>邀请机器人进入对应 Channel</li><li>调用<code>https://api.telegram.org/bot[BOT_TOKEN]/sendMessage?chat_id=[channel_name]&amp;text=[MESSAGE_TEXT]</code>即可,具体内容需自行替换</li><li>如: <code>bot_token</code> 为 <code>123:AAAA</code>, <code>channel_name</code> 为<code>public_chh</code>,<code>MESSAGE_TEXT</code>为 <code>test</code> 实际应该请求: <code>https://api.telegram.org/bot123:AAAA/sendMessage?chat_id=@public_chh&amp;text=test</code></li><li>正常的话, 取返回值的 <code>result.chat.id</code> 或者 <code>result.sender_chat.id</code> 即可, 都是Channel ID的值</li></ol>]]></content>
    
    
    <summary type="html">TG 机器人向 Channel 发送消息时, 需要 Channel ID, 如何获取呢?</summary>
    
    
    
    <category term="TG" scheme="https://iitii.github.io/categories/TG/"/>
    
    <category term="BOT" scheme="https://iitii.github.io/categories/TG/BOT/"/>
    
    
    <category term="TG" scheme="https://iitii.github.io/tags/TG/"/>
    
    <category term="BOT" scheme="https://iitii.github.io/tags/BOT/"/>
    
  </entry>
  
</feed>
